/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`copy_associative_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopyAssociativeDataError {
    DefaultResponse(models::BtAppAssociativeDataArrayInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_associative_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAssociativeDataError {
    DefaultResponse(models::BtAppElementBasicInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_associative_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAssociativeDataError {
    DefaultResponse(models::BtAppAssociativeDataArrayInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_associative_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostAssociativeDataError {
    DefaultResponse(models::BtAppAssociativeDataArrayInfo),
    UnknownValue(serde_json::Value),
}


/// Can only be copied between tabs in the same document. You can manage associativity with [translateIds](https://cad.onshape.com/glassworks/explorer/#/PartStudio/translateIds).
pub async fn copy_associative_data(configuration: &configuration::Configuration, did: &str, wid: &str, eid: &str, bt_app_element_params_array_bt_copy_view_associative_data_params: Option<models::BtAppElementParamsArrayBtCopyViewAssociativeDataParams>) -> Result<models::BtAppAssociativeDataArrayInfo, Error<CopyAssociativeDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wid = wid;
    let p_eid = eid;
    let p_bt_app_element_params_array_bt_copy_view_associative_data_params = bt_app_element_params_array_bt_copy_view_associative_data_params;

    let uri_str = format!("{}/appelements/d/{did}/w/{wid}/e/{eid}/copyassociativedata", configuration.base_path, did=crate::apis::urlencode(p_did), wid=crate::apis::urlencode(p_wid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    req_builder = req_builder.json(&p_bt_app_element_params_array_bt_copy_view_associative_data_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtAppAssociativeDataArrayInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtAppAssociativeDataArrayInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopyAssociativeDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// You can manage associativity with [translateIds](https://cad.onshape.com/glassworks/explorer/#/PartStudio/translateIds).
pub async fn delete_associative_data(configuration: &configuration::Configuration, did: &str, eid: &str, wvm: &str, wvmid: &str, transaction_id: Option<&str>, parent_change_id: Option<&str>, associative_data_id: Option<Vec<String>>, external_document_id: Option<&str>, element_id: Option<&str>, view_id: Option<&str>, microversion_id: Option<&str>, document_microversion: Option<&str>, deterministic_id: Option<&str>, feature_id: Option<&str>, entity_id: Option<&str>, occurrence_id: Option<&str>, reference_id: Option<&str>) -> Result<models::BtAppElementBasicInfo, Error<DeleteAssociativeDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_eid = eid;
    let p_wvm = wvm;
    let p_wvmid = wvmid;
    let p_transaction_id = transaction_id;
    let p_parent_change_id = parent_change_id;
    let p_associative_data_id = associative_data_id;
    let p_external_document_id = external_document_id;
    let p_element_id = element_id;
    let p_view_id = view_id;
    let p_microversion_id = microversion_id;
    let p_document_microversion = document_microversion;
    let p_deterministic_id = deterministic_id;
    let p_feature_id = feature_id;
    let p_entity_id = entity_id;
    let p_occurrence_id = occurrence_id;
    let p_reference_id = reference_id;

    let uri_str = format!("{}/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata", configuration.base_path, did=crate::apis::urlencode(p_did), eid=crate::apis::urlencode(p_eid), wvm=crate::apis::urlencode(p_wvm), wvmid=crate::apis::urlencode(p_wvmid));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_transaction_id {
        req_builder = req_builder.query(&[("transactionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_parent_change_id {
        req_builder = req_builder.query(&[("parentChangeId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_associative_data_id {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("associativeDataId".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("associativeDataId", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_external_document_id {
        req_builder = req_builder.query(&[("externalDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_element_id {
        req_builder = req_builder.query(&[("elementId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_view_id {
        req_builder = req_builder.query(&[("viewId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_microversion_id {
        req_builder = req_builder.query(&[("microversionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_document_microversion {
        req_builder = req_builder.query(&[("documentMicroversion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_deterministic_id {
        req_builder = req_builder.query(&[("deterministicId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_feature_id {
        req_builder = req_builder.query(&[("featureId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_entity_id {
        req_builder = req_builder.query(&[("entityId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_occurrence_id {
        req_builder = req_builder.query(&[("occurrenceId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reference_id {
        req_builder = req_builder.query(&[("referenceId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtAppElementBasicInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtAppElementBasicInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteAssociativeDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// You can manage associativity with [translateIds](https://cad.onshape.com/glassworks/explorer/#/PartStudio/translateIds).
pub async fn get_associative_data(configuration: &configuration::Configuration, did: &str, wvm: &str, wvmid: &str, eid: &str, link_document_id: Option<&str>, transaction_id: Option<&str>, change_id: Option<&str>, associative_data_id: Option<Vec<String>>, external_document_id: Option<&str>, element_id: Option<&str>, view_id: Option<&str>, microversion_id: Option<&str>, document_microversion: Option<&str>, deterministic_id: Option<&str>, feature_id: Option<&str>, entity_id: Option<&str>, occurrence_id: Option<&str>, return_id_tags: Option<bool>, reference_id: Option<&str>) -> Result<models::BtAppAssociativeDataArrayInfo, Error<GetAssociativeDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wvm = wvm;
    let p_wvmid = wvmid;
    let p_eid = eid;
    let p_link_document_id = link_document_id;
    let p_transaction_id = transaction_id;
    let p_change_id = change_id;
    let p_associative_data_id = associative_data_id;
    let p_external_document_id = external_document_id;
    let p_element_id = element_id;
    let p_view_id = view_id;
    let p_microversion_id = microversion_id;
    let p_document_microversion = document_microversion;
    let p_deterministic_id = deterministic_id;
    let p_feature_id = feature_id;
    let p_entity_id = entity_id;
    let p_occurrence_id = occurrence_id;
    let p_return_id_tags = return_id_tags;
    let p_reference_id = reference_id;

    let uri_str = format!("{}/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata", configuration.base_path, did=crate::apis::urlencode(p_did), wvm=crate::apis::urlencode(p_wvm), wvmid=crate::apis::urlencode(p_wvmid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_transaction_id {
        req_builder = req_builder.query(&[("transactionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_change_id {
        req_builder = req_builder.query(&[("changeId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_associative_data_id {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("associativeDataId".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("associativeDataId", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_external_document_id {
        req_builder = req_builder.query(&[("externalDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_element_id {
        req_builder = req_builder.query(&[("elementId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_view_id {
        req_builder = req_builder.query(&[("viewId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_microversion_id {
        req_builder = req_builder.query(&[("microversionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_document_microversion {
        req_builder = req_builder.query(&[("documentMicroversion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_deterministic_id {
        req_builder = req_builder.query(&[("deterministicId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_feature_id {
        req_builder = req_builder.query(&[("featureId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_entity_id {
        req_builder = req_builder.query(&[("entityId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_occurrence_id {
        req_builder = req_builder.query(&[("occurrenceId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_return_id_tags {
        req_builder = req_builder.query(&[("returnIdTags", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reference_id {
        req_builder = req_builder.query(&[("referenceId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtAppAssociativeDataArrayInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtAppAssociativeDataArrayInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAssociativeDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// You can manage associativity with [translateIds](https://cad.onshape.com/glassworks/explorer/#/PartStudio/translateIds).
pub async fn post_associative_data(configuration: &configuration::Configuration, did: &str, eid: &str, wvm: &str, wvmid: &str, body: &str) -> Result<models::BtAppAssociativeDataArrayInfo, Error<PostAssociativeDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_eid = eid;
    let p_wvm = wvm;
    let p_wvmid = wvmid;
    let p_body = body;

    let uri_str = format!("{}/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata", configuration.base_path, did=crate::apis::urlencode(p_did), eid=crate::apis::urlencode(p_eid), wvm=crate::apis::urlencode(p_wvm), wvmid=crate::apis::urlencode(p_wvmid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtAppAssociativeDataArrayInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtAppAssociativeDataArrayInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PostAssociativeDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use serde_json;
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_blob_translation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateBlobTranslationError {
    DefaultResponse(models::BtTranslationRequestInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`download_file_workspace`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DownloadFileWorkspaceError {
    DefaultResponse(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_units`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateUnitsError {
    DefaultResponse(models::BtDocumentElementProcessingInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_file_create_element`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadFileCreateElementError {
    DefaultResponse(models::BtDocumentElementProcessingInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_file_update_element`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadFileUpdateElementError {
    DefaultResponse(models::BtDocumentElementProcessingInfo),
    UnknownValue(serde_json::Value),
}


/// * Use `formatName` in the JSON request body to specify the export file type. Use [Translations/getAllTranslatorFormats](https://cad.onshape.com/glassworks/explorer/#/Translation/getAllTranslatorFormats) to get a list of valid export file formats.  * Set `storeInDocument` to `false` to export to a data file. Set to `true` to export to a blob element in the same document.  * See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
pub async fn create_blob_translation(configuration: &configuration::Configuration, did: &str, wv: &str, wvid: &str, eid: &str, bt_translate_format_params: models::BtTranslateFormatParams, link_document_id: Option<&str>) -> Result<models::BtTranslationRequestInfo, Error<CreateBlobTranslationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wv = wv;
    let p_wvid = wvid;
    let p_eid = eid;
    let p_bt_translate_format_params = bt_translate_format_params;
    let p_link_document_id = link_document_id;

    let uri_str = format!("{}/blobelements/d/{did}/{wv}/{wvid}/e/{eid}/translations", configuration.base_path, did=crate::apis::urlencode(p_did), wv=crate::apis::urlencode(p_wv), wvid=crate::apis::urlencode(p_wvid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    req_builder = req_builder.json(&p_bt_translate_format_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtTranslationRequestInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtTranslationRequestInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateBlobTranslationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
pub async fn download_file_workspace(configuration: &configuration::Configuration, did: &str, wid: &str, eid: &str, link_document_id: Option<&str>, content_disposition: Option<&str>, if_none_match: Option<&str>) -> Result<std::path::PathBuf, Error<DownloadFileWorkspaceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wid = wid;
    let p_eid = eid;
    let p_link_document_id = link_document_id;
    let p_content_disposition = content_disposition;
    let p_if_none_match = if_none_match;

    let uri_str = format!("{}/blobelements/d/{did}/w/{wid}/e/{eid}", configuration.base_path, did=crate::apis::urlencode(p_did), wid=crate::apis::urlencode(p_wid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_content_disposition {
        req_builder = req_builder.query(&[("contentDisposition", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_if_none_match {
        req_builder = req_builder.header("If-None-Match", param_value.to_string());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `std::path::PathBuf`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `std::path::PathBuf`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DownloadFileWorkspaceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_units(configuration: &configuration::Configuration, did: &str, wid: &str, eid: &str, bt_update_mesh_units_params: models::BtUpdateMeshUnitsParams, link_document_id: Option<&str>) -> Result<models::BtDocumentElementProcessingInfo, Error<UpdateUnitsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wid = wid;
    let p_eid = eid;
    let p_bt_update_mesh_units_params = bt_update_mesh_units_params;
    let p_link_document_id = link_document_id;

    let uri_str = format!("{}/blobelements/d/{did}/w/{wid}/e/{eid}/units", configuration.base_path, did=crate::apis::urlencode(p_did), wid=crate::apis::urlencode(p_wid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    req_builder = req_builder.json(&p_bt_update_mesh_units_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtDocumentElementProcessingInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtDocumentElementProcessingInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateUnitsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Request body parameters are multipart fields, so you must use `\"Content-Type\":\"multipart/form-data\"` in the request header.
pub async fn upload_file_create_element(configuration: &configuration::Configuration, did: &str, wid: &str, link_document_id: Option<&str>, file: Option<serde_json::Value>, allow_faulty_parts: Option<bool>, create_composite: Option<bool>, create_drawing_if_possible: Option<bool>, encoded_filename: Option<&str>, extract_assembly_hierarchy: Option<bool>, flatten_assemblies: Option<bool>, format_name: Option<&str>, join_adjacent_surfaces: Option<bool>, location_element_id: Option<&str>, location_group_id: Option<&str>, location_position: Option<i32>, notify_user: Option<bool>, owner_id: Option<&str>, parent_id: Option<&str>, project_id: Option<&str>, public: Option<bool>, one_part_per_doc: Option<bool>, split_assemblies_into_multiple_documents: Option<bool>, store_in_document: Option<bool>, translate: Option<bool>, unit: Option<&str>, upload_id: Option<&str>, version_string: Option<&str>, import_appearances: Option<bool>, import_material_density: Option<bool>, y_axis_is_up: Option<bool>, import_within_document: Option<bool>, use_iges_import_post_processing: Option<bool>, upgrade_feature_script_version: Option<bool>, preserve_source_ids: Option<bool>, document_id: Option<&str>, repoint_app_element_version_refs: Option<bool>) -> Result<models::BtDocumentElementProcessingInfo, Error<UploadFileCreateElementError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wid = wid;
    let p_link_document_id = link_document_id;
    let p_file = file;
    let p_allow_faulty_parts = allow_faulty_parts;
    let p_create_composite = create_composite;
    let p_create_drawing_if_possible = create_drawing_if_possible;
    let p_encoded_filename = encoded_filename;
    let p_extract_assembly_hierarchy = extract_assembly_hierarchy;
    let p_flatten_assemblies = flatten_assemblies;
    let p_format_name = format_name;
    let p_join_adjacent_surfaces = join_adjacent_surfaces;
    let p_location_element_id = location_element_id;
    let p_location_group_id = location_group_id;
    let p_location_position = location_position;
    let p_notify_user = notify_user;
    let p_owner_id = owner_id;
    let p_parent_id = parent_id;
    let p_project_id = project_id;
    let p_public = public;
    let p_one_part_per_doc = one_part_per_doc;
    let p_split_assemblies_into_multiple_documents = split_assemblies_into_multiple_documents;
    let p_store_in_document = store_in_document;
    let p_translate = translate;
    let p_unit = unit;
    let p_upload_id = upload_id;
    let p_version_string = version_string;
    let p_import_appearances = import_appearances;
    let p_import_material_density = import_material_density;
    let p_y_axis_is_up = y_axis_is_up;
    let p_import_within_document = import_within_document;
    let p_use_iges_import_post_processing = use_iges_import_post_processing;
    let p_upgrade_feature_script_version = upgrade_feature_script_version;
    let p_preserve_source_ids = preserve_source_ids;
    let p_document_id = document_id;
    let p_repoint_app_element_version_refs = repoint_app_element_version_refs;

    let uri_str = format!("{}/blobelements/d/{did}/w/{wid}", configuration.base_path, did=crate::apis::urlencode(p_did), wid=crate::apis::urlencode(p_wid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    if let Some(param_value) = p_file {
        multipart_form = multipart_form.text("file", param_value.to_string());
    }
    if let Some(param_value) = p_allow_faulty_parts {
        multipart_form = multipart_form.text("allowFaultyParts", param_value.to_string());
    }
    if let Some(param_value) = p_create_composite {
        multipart_form = multipart_form.text("createComposite", param_value.to_string());
    }
    if let Some(param_value) = p_create_drawing_if_possible {
        multipart_form = multipart_form.text("createDrawingIfPossible", param_value.to_string());
    }
    if let Some(param_value) = p_encoded_filename {
        multipart_form = multipart_form.text("encodedFilename", param_value.to_string());
    }
    if let Some(param_value) = p_extract_assembly_hierarchy {
        multipart_form = multipart_form.text("extractAssemblyHierarchy", param_value.to_string());
    }
    if let Some(param_value) = p_flatten_assemblies {
        multipart_form = multipart_form.text("flattenAssemblies", param_value.to_string());
    }
    if let Some(param_value) = p_format_name {
        multipart_form = multipart_form.text("formatName", param_value.to_string());
    }
    if let Some(param_value) = p_join_adjacent_surfaces {
        multipart_form = multipart_form.text("joinAdjacentSurfaces", param_value.to_string());
    }
    if let Some(param_value) = p_location_element_id {
        multipart_form = multipart_form.text("locationElementId", param_value.to_string());
    }
    if let Some(param_value) = p_location_group_id {
        multipart_form = multipart_form.text("locationGroupId", param_value.to_string());
    }
    if let Some(param_value) = p_location_position {
        multipart_form = multipart_form.text("locationPosition", param_value.to_string());
    }
    if let Some(param_value) = p_notify_user {
        multipart_form = multipart_form.text("notifyUser", param_value.to_string());
    }
    if let Some(param_value) = p_owner_id {
        multipart_form = multipart_form.text("ownerId", param_value.to_string());
    }
    if let Some(param_value) = p_parent_id {
        multipart_form = multipart_form.text("parentId", param_value.to_string());
    }
    if let Some(param_value) = p_project_id {
        multipart_form = multipart_form.text("projectId", param_value.to_string());
    }
    if let Some(param_value) = p_public {
        multipart_form = multipart_form.text("public", param_value.to_string());
    }
    if let Some(param_value) = p_one_part_per_doc {
        multipart_form = multipart_form.text("onePartPerDoc", param_value.to_string());
    }
    if let Some(param_value) = p_split_assemblies_into_multiple_documents {
        multipart_form = multipart_form.text("splitAssembliesIntoMultipleDocuments", param_value.to_string());
    }
    if let Some(param_value) = p_store_in_document {
        multipart_form = multipart_form.text("storeInDocument", param_value.to_string());
    }
    if let Some(param_value) = p_translate {
        multipart_form = multipart_form.text("translate", param_value.to_string());
    }
    if let Some(param_value) = p_unit {
        multipart_form = multipart_form.text("unit", param_value.to_string());
    }
    if let Some(param_value) = p_upload_id {
        multipart_form = multipart_form.text("uploadId", param_value.to_string());
    }
    if let Some(param_value) = p_version_string {
        multipart_form = multipart_form.text("versionString", param_value.to_string());
    }
    if let Some(param_value) = p_import_appearances {
        multipart_form = multipart_form.text("importAppearances", param_value.to_string());
    }
    if let Some(param_value) = p_import_material_density {
        multipart_form = multipart_form.text("importMaterialDensity", param_value.to_string());
    }
    if let Some(param_value) = p_y_axis_is_up {
        multipart_form = multipart_form.text("yAxisIsUp", param_value.to_string());
    }
    if let Some(param_value) = p_import_within_document {
        multipart_form = multipart_form.text("importWithinDocument", param_value.to_string());
    }
    if let Some(param_value) = p_use_iges_import_post_processing {
        multipart_form = multipart_form.text("useIGESImportPostProcessing", param_value.to_string());
    }
    if let Some(param_value) = p_upgrade_feature_script_version {
        multipart_form = multipart_form.text("upgradeFeatureScriptVersion", param_value.to_string());
    }
    if let Some(param_value) = p_preserve_source_ids {
        multipart_form = multipart_form.text("preserveSourceIds", param_value.to_string());
    }
    if let Some(param_value) = p_document_id {
        multipart_form = multipart_form.text("documentId", param_value.to_string());
    }
    if let Some(param_value) = p_repoint_app_element_version_refs {
        multipart_form = multipart_form.text("repointAppElementVersionRefs", param_value.to_string());
    }
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtDocumentElementProcessingInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtDocumentElementProcessingInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UploadFileCreateElementError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Request body parameters are multipart fields, so you must use `\"Content-Type\":\"multipart/form-data\"` in the request header.
pub async fn upload_file_update_element(configuration: &configuration::Configuration, did: &str, wid: &str, eid: &str, link_document_id: Option<&str>, parent_change_id: Option<&str>, file: Option<serde_json::Value>, allow_faulty_parts: Option<bool>, create_composite: Option<bool>, create_drawing_if_possible: Option<bool>, encoded_filename: Option<&str>, extract_assembly_hierarchy: Option<bool>, flatten_assemblies: Option<bool>, format_name: Option<&str>, join_adjacent_surfaces: Option<bool>, location_element_id: Option<&str>, location_group_id: Option<&str>, location_position: Option<i32>, notify_user: Option<bool>, owner_id: Option<&str>, parent_id: Option<&str>, project_id: Option<&str>, public: Option<bool>, one_part_per_doc: Option<bool>, split_assemblies_into_multiple_documents: Option<bool>, store_in_document: Option<bool>, translate: Option<bool>, unit: Option<&str>, upload_id: Option<&str>, version_string: Option<&str>, import_appearances: Option<bool>, import_material_density: Option<bool>, y_axis_is_up: Option<bool>, import_within_document: Option<bool>, use_iges_import_post_processing: Option<bool>, upgrade_feature_script_version: Option<bool>, preserve_source_ids: Option<bool>, document_id: Option<&str>, repoint_app_element_version_refs: Option<bool>) -> Result<models::BtDocumentElementProcessingInfo, Error<UploadFileUpdateElementError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wid = wid;
    let p_eid = eid;
    let p_link_document_id = link_document_id;
    let p_parent_change_id = parent_change_id;
    let p_file = file;
    let p_allow_faulty_parts = allow_faulty_parts;
    let p_create_composite = create_composite;
    let p_create_drawing_if_possible = create_drawing_if_possible;
    let p_encoded_filename = encoded_filename;
    let p_extract_assembly_hierarchy = extract_assembly_hierarchy;
    let p_flatten_assemblies = flatten_assemblies;
    let p_format_name = format_name;
    let p_join_adjacent_surfaces = join_adjacent_surfaces;
    let p_location_element_id = location_element_id;
    let p_location_group_id = location_group_id;
    let p_location_position = location_position;
    let p_notify_user = notify_user;
    let p_owner_id = owner_id;
    let p_parent_id = parent_id;
    let p_project_id = project_id;
    let p_public = public;
    let p_one_part_per_doc = one_part_per_doc;
    let p_split_assemblies_into_multiple_documents = split_assemblies_into_multiple_documents;
    let p_store_in_document = store_in_document;
    let p_translate = translate;
    let p_unit = unit;
    let p_upload_id = upload_id;
    let p_version_string = version_string;
    let p_import_appearances = import_appearances;
    let p_import_material_density = import_material_density;
    let p_y_axis_is_up = y_axis_is_up;
    let p_import_within_document = import_within_document;
    let p_use_iges_import_post_processing = use_iges_import_post_processing;
    let p_upgrade_feature_script_version = upgrade_feature_script_version;
    let p_preserve_source_ids = preserve_source_ids;
    let p_document_id = document_id;
    let p_repoint_app_element_version_refs = repoint_app_element_version_refs;

    let uri_str = format!("{}/blobelements/d/{did}/w/{wid}/e/{eid}", configuration.base_path, did=crate::apis::urlencode(p_did), wid=crate::apis::urlencode(p_wid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_parent_change_id {
        req_builder = req_builder.query(&[("parentChangeId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    if let Some(param_value) = p_file {
        multipart_form = multipart_form.text("file", param_value.to_string());
    }
    if let Some(param_value) = p_allow_faulty_parts {
        multipart_form = multipart_form.text("allowFaultyParts", param_value.to_string());
    }
    if let Some(param_value) = p_create_composite {
        multipart_form = multipart_form.text("createComposite", param_value.to_string());
    }
    if let Some(param_value) = p_create_drawing_if_possible {
        multipart_form = multipart_form.text("createDrawingIfPossible", param_value.to_string());
    }
    if let Some(param_value) = p_encoded_filename {
        multipart_form = multipart_form.text("encodedFilename", param_value.to_string());
    }
    if let Some(param_value) = p_extract_assembly_hierarchy {
        multipart_form = multipart_form.text("extractAssemblyHierarchy", param_value.to_string());
    }
    if let Some(param_value) = p_flatten_assemblies {
        multipart_form = multipart_form.text("flattenAssemblies", param_value.to_string());
    }
    if let Some(param_value) = p_format_name {
        multipart_form = multipart_form.text("formatName", param_value.to_string());
    }
    if let Some(param_value) = p_join_adjacent_surfaces {
        multipart_form = multipart_form.text("joinAdjacentSurfaces", param_value.to_string());
    }
    if let Some(param_value) = p_location_element_id {
        multipart_form = multipart_form.text("locationElementId", param_value.to_string());
    }
    if let Some(param_value) = p_location_group_id {
        multipart_form = multipart_form.text("locationGroupId", param_value.to_string());
    }
    if let Some(param_value) = p_location_position {
        multipart_form = multipart_form.text("locationPosition", param_value.to_string());
    }
    if let Some(param_value) = p_notify_user {
        multipart_form = multipart_form.text("notifyUser", param_value.to_string());
    }
    if let Some(param_value) = p_owner_id {
        multipart_form = multipart_form.text("ownerId", param_value.to_string());
    }
    if let Some(param_value) = p_parent_id {
        multipart_form = multipart_form.text("parentId", param_value.to_string());
    }
    if let Some(param_value) = p_project_id {
        multipart_form = multipart_form.text("projectId", param_value.to_string());
    }
    if let Some(param_value) = p_public {
        multipart_form = multipart_form.text("public", param_value.to_string());
    }
    if let Some(param_value) = p_one_part_per_doc {
        multipart_form = multipart_form.text("onePartPerDoc", param_value.to_string());
    }
    if let Some(param_value) = p_split_assemblies_into_multiple_documents {
        multipart_form = multipart_form.text("splitAssembliesIntoMultipleDocuments", param_value.to_string());
    }
    if let Some(param_value) = p_store_in_document {
        multipart_form = multipart_form.text("storeInDocument", param_value.to_string());
    }
    if let Some(param_value) = p_translate {
        multipart_form = multipart_form.text("translate", param_value.to_string());
    }
    if let Some(param_value) = p_unit {
        multipart_form = multipart_form.text("unit", param_value.to_string());
    }
    if let Some(param_value) = p_upload_id {
        multipart_form = multipart_form.text("uploadId", param_value.to_string());
    }
    if let Some(param_value) = p_version_string {
        multipart_form = multipart_form.text("versionString", param_value.to_string());
    }
    if let Some(param_value) = p_import_appearances {
        multipart_form = multipart_form.text("importAppearances", param_value.to_string());
    }
    if let Some(param_value) = p_import_material_density {
        multipart_form = multipart_form.text("importMaterialDensity", param_value.to_string());
    }
    if let Some(param_value) = p_y_axis_is_up {
        multipart_form = multipart_form.text("yAxisIsUp", param_value.to_string());
    }
    if let Some(param_value) = p_import_within_document {
        multipart_form = multipart_form.text("importWithinDocument", param_value.to_string());
    }
    if let Some(param_value) = p_use_iges_import_post_processing {
        multipart_form = multipart_form.text("useIGESImportPostProcessing", param_value.to_string());
    }
    if let Some(param_value) = p_upgrade_feature_script_version {
        multipart_form = multipart_form.text("upgradeFeatureScriptVersion", param_value.to_string());
    }
    if let Some(param_value) = p_preserve_source_ids {
        multipart_form = multipart_form.text("preserveSourceIds", param_value.to_string());
    }
    if let Some(param_value) = p_document_id {
        multipart_form = multipart_form.text("documentId", param_value.to_string());
    }
    if let Some(param_value) = p_repoint_app_element_version_refs {
        multipart_form = multipart_form.text("repointAppElementVersionRefs", param_value.to_string());
    }
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtDocumentElementProcessingInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtDocumentElementProcessingInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UploadFileUpdateElementError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


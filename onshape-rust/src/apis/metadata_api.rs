/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_full_assembly_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFullAssemblyMetadataError {
    DefaultResponse(models::BtAssemblyItemMetadataInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_veop_standard_content_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVeopStandardContentMetadataError {
    DefaultResponse(models::BtMetadataObjectInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_wmve_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWmveMetadataError {
    DefaultResponse(models::BtMetadataObjectInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_wmvep_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWmvepMetadataError {
    DefaultResponse(models::BtMetadataObjectInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_wmveps_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWmvepsMetadataError {
    DefaultResponse(models::BtMetadataObjectListInfoBtMetadataPartInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_wmves_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWmvesMetadataError {
    DefaultResponse(models::BtMetadataObjectListInfoBtMetadataElementInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_wv_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWvMetadataError {
    DefaultResponse(models::BtMetadataObjectInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_veop_standard_content_part_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateVeopStandardContentPartMetadataError {
    DefaultResponse(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_wv_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateWvMetadataError {
    DefaultResponse(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_wve_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateWveMetadataError {
    DefaultResponse(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_wvep_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateWvepMetadataError {
    DefaultResponse(serde_json::Value),
    UnknownValue(serde_json::Value),
}


/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * `linkDocumentId` can be specified where applicable and this combined with the query param `inferMetadataOwner` (default value is `false`) will be used to infer metadata owner.  * `configuration` optional query parameter defaults to default configuration.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
pub async fn get_full_assembly_metadata(configuration: &configuration::Configuration, did: &str, wvm: &str, wvmid: &str, eid: &str, link_document_id: Option<&str>, configuration2: Option<&str>) -> Result<models::BtAssemblyItemMetadataInfo, Error<GetFullAssemblyMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wvm = wvm;
    let p_wvmid = wvmid;
    let p_eid = eid;
    let p_link_document_id = link_document_id;
    let p_configuration = configuration2;

    let uri_str = format!("{}/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/assembly-debug", configuration.base_path, did=crate::apis::urlencode(p_did), wvm=crate::apis::urlencode(p_wvm), wvmid=crate::apis::urlencode(p_wvmid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_configuration {
        req_builder = req_builder.query(&[("configuration", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtAssemblyItemMetadataInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtAssemblyItemMetadataInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetFullAssemblyMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the part in the `pid` path parameter.  * The `configuration` and `linkDocumentId` query parameters are required.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
pub async fn get_veop_standard_content_metadata(configuration: &configuration::Configuration, did: &str, vid: &str, eid: &str, pid: &str, configuration2: Option<&str>, link_document_id: Option<&str>, include_computed_properties: Option<bool>, include_computed_assembly_properties: Option<bool>, thumbnail: Option<bool>) -> Result<models::BtMetadataObjectInfo, Error<GetVeopStandardContentMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_vid = vid;
    let p_eid = eid;
    let p_pid = pid;
    let p_configuration = configuration2;
    let p_link_document_id = link_document_id;
    let p_include_computed_properties = include_computed_properties;
    let p_include_computed_assembly_properties = include_computed_assembly_properties;
    let p_thumbnail = thumbnail;

    let uri_str = format!("{}/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/p/{pid}", configuration.base_path, did=crate::apis::urlencode(p_did), vid=crate::apis::urlencode(p_vid), eid=crate::apis::urlencode(p_eid), pid=crate::apis::urlencode(p_pid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_configuration {
        req_builder = req_builder.query(&[("configuration", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_properties {
        req_builder = req_builder.query(&[("includeComputedProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_assembly_properties {
        req_builder = req_builder.query(&[("includeComputedAssemblyProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_thumbnail {
        req_builder = req_builder.query(&[("thumbnail", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtMetadataObjectInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtMetadataObjectInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetVeopStandardContentMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * `linkDocumentId` can be specified where applicable and this combined with the query param `inferMetadataOwner` (default value is `false`) will be used to infer metadata owner.  * `configuration` optional query parameter defaults to default configuration.  * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
pub async fn get_wmve_metadata(configuration: &configuration::Configuration, did: &str, wvm: &str, wvmid: &str, eid: &str, link_document_id: Option<&str>, configuration2: Option<&str>, infer_metadata_owner: Option<bool>, depth: Option<&str>, include_computed_properties: Option<bool>, include_computed_assembly_properties: Option<bool>, thumbnail: Option<bool>) -> Result<models::BtMetadataObjectInfo, Error<GetWmveMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wvm = wvm;
    let p_wvmid = wvmid;
    let p_eid = eid;
    let p_link_document_id = link_document_id;
    let p_configuration = configuration2;
    let p_infer_metadata_owner = infer_metadata_owner;
    let p_depth = depth;
    let p_include_computed_properties = include_computed_properties;
    let p_include_computed_assembly_properties = include_computed_assembly_properties;
    let p_thumbnail = thumbnail;

    let uri_str = format!("{}/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}", configuration.base_path, did=crate::apis::urlencode(p_did), wvm=crate::apis::urlencode(p_wvm), wvmid=crate::apis::urlencode(p_wvmid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_configuration {
        req_builder = req_builder.query(&[("configuration", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_infer_metadata_owner {
        req_builder = req_builder.query(&[("inferMetadataOwner", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_depth {
        req_builder = req_builder.query(&[("depth", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_properties {
        req_builder = req_builder.query(&[("includeComputedProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_assembly_properties {
        req_builder = req_builder.query(&[("includeComputedAssemblyProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_thumbnail {
        req_builder = req_builder.query(&[("thumbnail", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtMetadataObjectInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtMetadataObjectInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetWmveMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the part in the `iden` or `pid` path parameter.  * The `configuration` optional query parameter uses the default configuration unless otherwise specified.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
pub async fn get_wmvep_metadata(configuration: &configuration::Configuration, did: &str, wvm: &str, wvmid: &str, eid: &str, iden: &str, pid: &str, link_document_id: Option<&str>, configuration2: Option<&str>, rollback_bar_index: Option<i32>, element_microversion_id: Option<&str>, infer_metadata_owner: Option<bool>, include_computed_properties: Option<bool>, include_computed_assembly_properties: Option<bool>, thumbnail: Option<bool>) -> Result<models::BtMetadataObjectInfo, Error<GetWmvepMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wvm = wvm;
    let p_wvmid = wvmid;
    let p_eid = eid;
    let p_iden = iden;
    let p_pid = pid;
    let p_link_document_id = link_document_id;
    let p_configuration = configuration2;
    let p_rollback_bar_index = rollback_bar_index;
    let p_element_microversion_id = element_microversion_id;
    let p_infer_metadata_owner = infer_metadata_owner;
    let p_include_computed_properties = include_computed_properties;
    let p_include_computed_assembly_properties = include_computed_assembly_properties;
    let p_thumbnail = thumbnail;

    let uri_str = format!("{}/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}", configuration.base_path, did=crate::apis::urlencode(p_did), wvm=crate::apis::urlencode(p_wvm), wvmid=crate::apis::urlencode(p_wvmid), eid=crate::apis::urlencode(p_eid), iden=crate::apis::urlencode(p_iden), pid=crate::apis::urlencode(p_pid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_configuration {
        req_builder = req_builder.query(&[("configuration", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_rollback_bar_index {
        req_builder = req_builder.query(&[("rollbackBarIndex", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_element_microversion_id {
        req_builder = req_builder.query(&[("elementMicroversionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_infer_metadata_owner {
        req_builder = req_builder.query(&[("inferMetadataOwner", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_properties {
        req_builder = req_builder.query(&[("includeComputedProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_assembly_properties {
        req_builder = req_builder.query(&[("includeComputedAssemblyProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_thumbnail {
        req_builder = req_builder.query(&[("thumbnail", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtMetadataObjectInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtMetadataObjectInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetWmvepMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * The `configuration` optional query parameter uses the default configuration unless otherwise specified.  * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
pub async fn get_wmveps_metadata(configuration: &configuration::Configuration, did: &str, wvm: &str, wvmid: &str, eid: &str, link_document_id: Option<&str>, configuration2: Option<&str>, infer_metadata_owner: Option<bool>, include_computed_properties: Option<bool>, include_computed_assembly_properties: Option<bool>, thumbnail: Option<bool>) -> Result<models::BtMetadataObjectListInfoBtMetadataPartInfo, Error<GetWmvepsMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wvm = wvm;
    let p_wvmid = wvmid;
    let p_eid = eid;
    let p_link_document_id = link_document_id;
    let p_configuration = configuration2;
    let p_infer_metadata_owner = infer_metadata_owner;
    let p_include_computed_properties = include_computed_properties;
    let p_include_computed_assembly_properties = include_computed_assembly_properties;
    let p_thumbnail = thumbnail;

    let uri_str = format!("{}/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p", configuration.base_path, did=crate::apis::urlencode(p_did), wvm=crate::apis::urlencode(p_wvm), wvmid=crate::apis::urlencode(p_wvmid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_configuration {
        req_builder = req_builder.query(&[("configuration", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_infer_metadata_owner {
        req_builder = req_builder.query(&[("inferMetadataOwner", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_properties {
        req_builder = req_builder.query(&[("includeComputedProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_assembly_properties {
        req_builder = req_builder.query(&[("includeComputedAssemblyProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_thumbnail {
        req_builder = req_builder.query(&[("thumbnail", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtMetadataObjectListInfoBtMetadataPartInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtMetadataObjectListInfoBtMetadataPartInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetWmvepsMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * You can specify the optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
pub async fn get_wmves_metadata(configuration: &configuration::Configuration, did: &str, wvm: &str, wvmid: &str, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>, depth: Option<&str>, include_computed_properties: Option<bool>, include_computed_assembly_properties: Option<bool>, thumbnail: Option<bool>) -> Result<models::BtMetadataObjectListInfoBtMetadataElementInfo, Error<GetWmvesMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wvm = wvm;
    let p_wvmid = wvmid;
    let p_link_document_id = link_document_id;
    let p_infer_metadata_owner = infer_metadata_owner;
    let p_depth = depth;
    let p_include_computed_properties = include_computed_properties;
    let p_include_computed_assembly_properties = include_computed_assembly_properties;
    let p_thumbnail = thumbnail;

    let uri_str = format!("{}/metadata/d/{did}/{wvm}/{wvmid}/e", configuration.base_path, did=crate::apis::urlencode(p_did), wvm=crate::apis::urlencode(p_wvm), wvmid=crate::apis::urlencode(p_wvmid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_infer_metadata_owner {
        req_builder = req_builder.query(&[("inferMetadataOwner", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_depth {
        req_builder = req_builder.query(&[("depth", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_properties {
        req_builder = req_builder.query(&[("includeComputedProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_assembly_properties {
        req_builder = req_builder.query(&[("includeComputedAssemblyProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_thumbnail {
        req_builder = req_builder.query(&[("thumbnail", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtMetadataObjectListInfoBtMetadataElementInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtMetadataObjectListInfoBtMetadataElementInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetWmvesMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.  * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.  * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.  * You can also choose to include a `thumbnail`. Default value is `false`.
pub async fn get_wv_metadata(configuration: &configuration::Configuration, did: &str, wv: &str, wvid: &str, link_document_id: Option<&str>, infer_metadata_owner: Option<bool>, depth: Option<&str>, include_computed_properties: Option<bool>, include_computed_assembly_properties: Option<bool>, thumbnail: Option<bool>) -> Result<models::BtMetadataObjectInfo, Error<GetWvMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wv = wv;
    let p_wvid = wvid;
    let p_link_document_id = link_document_id;
    let p_infer_metadata_owner = infer_metadata_owner;
    let p_depth = depth;
    let p_include_computed_properties = include_computed_properties;
    let p_include_computed_assembly_properties = include_computed_assembly_properties;
    let p_thumbnail = thumbnail;

    let uri_str = format!("{}/metadata/d/{did}/{wv}/{wvid}", configuration.base_path, did=crate::apis::urlencode(p_did), wv=crate::apis::urlencode(p_wv), wvid=crate::apis::urlencode(p_wvid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_infer_metadata_owner {
        req_builder = req_builder.query(&[("inferMetadataOwner", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_depth {
        req_builder = req_builder.query(&[("depth", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_properties {
        req_builder = req_builder.query(&[("includeComputedProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_assembly_properties {
        req_builder = req_builder.query(&[("includeComputedAssemblyProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_thumbnail {
        req_builder = req_builder.query(&[("thumbnail", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtMetadataObjectInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtMetadataObjectInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetWvMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the document ID to update in the `did` path param.  * Specify the document in which you have inserted the standard content part in the `linkDocumentId` query param.  * Specify the property metadata to update in the Request body.
pub async fn update_veop_standard_content_part_metadata(configuration: &configuration::Configuration, did: &str, link_document_id: &str, body: &str) -> Result<serde_json::Value, Error<UpdateVeopStandardContentPartMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_link_document_id = link_document_id;
    let p_body = body;

    let uri_str = format!("{}/metadata/standardcontent/d/{did}", configuration.base_path, did=crate::apis::urlencode(p_did));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    req_builder = req_builder.query(&[("linkDocumentId", &p_link_document_id.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateVeopStandardContentPartMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
pub async fn update_wv_metadata(configuration: &configuration::Configuration, did: &str, wv: &str, wvid: &str, body: &str) -> Result<serde_json::Value, Error<UpdateWvMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wv = wv;
    let p_wvid = wvid;
    let p_body = body;

    let uri_str = format!("{}/metadata/d/{did}/{wv}/{wvid}", configuration.base_path, did=crate::apis::urlencode(p_did), wv=crate::apis::urlencode(p_wv), wvid=crate::apis::urlencode(p_wvid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateWvMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Microversion (`m`) in `wvm` path parameter option is not supported.  * Specify the property metadata to update in the Request body.
pub async fn update_wve_metadata(configuration: &configuration::Configuration, did: &str, wvm: &str, wvmid: &str, eid: &str, body: &str, configuration2: Option<&str>) -> Result<serde_json::Value, Error<UpdateWveMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wvm = wvm;
    let p_wvmid = wvmid;
    let p_eid = eid;
    let p_body = body;
    let p_configuration = configuration2;

    let uri_str = format!("{}/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}", configuration.base_path, did=crate::apis::urlencode(p_did), wvm=crate::apis::urlencode(p_wvm), wvmid=crate::apis::urlencode(p_wvmid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_configuration {
        req_builder = req_builder.query(&[("configuration", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateWveMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.  * Specify the part in the `iden` or `pid` path parameter.  * The `configuration` optional query parameter uses the default configuration unless otherwise specified.  * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.  * Specify the property metadata to update in the Request body.
pub async fn update_wvep_metadata(configuration: &configuration::Configuration, did: &str, wvm: &str, wvmid: &str, eid: &str, iden: &str, pid: &str, body: &str, link_document_id: Option<&str>, configuration2: Option<&str>, rollback_bar_index: Option<i32>, element_microversion_id: Option<&str>) -> Result<serde_json::Value, Error<UpdateWvepMetadataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_wvm = wvm;
    let p_wvmid = wvmid;
    let p_eid = eid;
    let p_iden = iden;
    let p_pid = pid;
    let p_body = body;
    let p_link_document_id = link_document_id;
    let p_configuration = configuration2;
    let p_rollback_bar_index = rollback_bar_index;
    let p_element_microversion_id = element_microversion_id;

    let uri_str = format!("{}/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}", configuration.base_path, did=crate::apis::urlencode(p_did), wvm=crate::apis::urlencode(p_wvm), wvmid=crate::apis::urlencode(p_wvmid), eid=crate::apis::urlencode(p_eid), iden=crate::apis::urlencode(p_iden), pid=crate::apis::urlencode(p_pid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_configuration {
        req_builder = req_builder.query(&[("configuration", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_rollback_bar_index {
        req_builder = req_builder.query(&[("rollbackBarIndex", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_element_microversion_id {
        req_builder = req_builder.query(&[("elementMicroversionId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    req_builder = req_builder.json(&p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateWvepMetadataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


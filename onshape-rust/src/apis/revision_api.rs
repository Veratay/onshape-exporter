/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`delete_revision_history`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteRevisionHistoryError {
    DefaultResponse(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`enumerate_revisions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EnumerateRevisionsError {
    DefaultResponse(models::BtListResponseBtRevisionInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_in_document`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllInDocumentError {
    DefaultResponse(models::BtListResponseBtRevisionInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_in_document_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllInDocumentVersionError {
    DefaultResponse(models::BtListResponseBtRevisionInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_latest_in_document_or_company`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLatestInDocumentOrCompanyError {
    DefaultResponse(models::BtRevisionInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_revision_by_part_number`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRevisionByPartNumberError {
    DefaultResponse(models::BtRevisionInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_revision_history_in_company_by_element_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRevisionHistoryInCompanyByElementIdError {
    DefaultResponse(models::BtRevisionListResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_revision_history_in_company_by_part_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRevisionHistoryInCompanyByPartIdError {
    DefaultResponse(models::BtRevisionListResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_revision_history_in_company_by_part_number`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRevisionHistoryInCompanyByPartNumberError {
    DefaultResponse(models::BtRevisionListResponse),
    UnknownValue(serde_json::Value),
}


/// Only company admins can call this API. All documents that contain or use the part number must be deleted first. This operation cannot be undone.
pub async fn delete_revision_history(configuration: &configuration::Configuration, cid: &str, pnum: &str, et: &str, ignore_linked_documents: Option<bool>) -> Result<serde_json::Value, Error<DeleteRevisionHistoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cid = cid;
    let p_pnum = pnum;
    let p_et = et;
    let p_ignore_linked_documents = ignore_linked_documents;

    let uri_str = format!("{}/revisions/companies/{cid}/partnumber/{pnum}/elementType/{et}", configuration.base_path, cid=crate::apis::urlencode(p_cid), pnum=crate::apis::urlencode(p_pnum), et=crate::apis::urlencode(p_et));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_ignore_linked_documents {
        req_builder = req_builder.query(&[("ignoreLinkedDocuments", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteRevisionHistoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// * Returns a slice of all revisions per API call.  * To get the next set of results, use the `next` URL from the response body.  * This API can only be called by company admins.
pub async fn enumerate_revisions(configuration: &configuration::Configuration, cid: &str, element_type: Option<i32>, limit: Option<i32>, latest_only: Option<bool>, after: Option<String>) -> Result<models::BtListResponseBtRevisionInfo, Error<EnumerateRevisionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cid = cid;
    let p_element_type = element_type;
    let p_limit = limit;
    let p_latest_only = latest_only;
    let p_after = after;

    let uri_str = format!("{}/revisions/companies/{cid}", configuration.base_path, cid=crate::apis::urlencode(p_cid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_element_type {
        req_builder = req_builder.query(&[("elementType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_latest_only {
        req_builder = req_builder.query(&[("latestOnly", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtListResponseBtRevisionInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtListResponseBtRevisionInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EnumerateRevisionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve a list of all revisions that exist in a document and are owned by the document's owning company.
pub async fn get_all_in_document(configuration: &configuration::Configuration, did: &str) -> Result<models::BtListResponseBtRevisionInfo, Error<GetAllInDocumentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;

    let uri_str = format!("{}/revisions/d/{did}", configuration.base_path, did=crate::apis::urlencode(p_did));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtListResponseBtRevisionInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtListResponseBtRevisionInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAllInDocumentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve a list of all revisions that exist in a document version and are owned by the document's owning company.
pub async fn get_all_in_document_version(configuration: &configuration::Configuration, did: &str, vid: &str) -> Result<models::BtListResponseBtRevisionInfo, Error<GetAllInDocumentVersionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_vid = vid;

    let uri_str = format!("{}/revisions/d/{did}/v/{vid}", configuration.base_path, did=crate::apis::urlencode(p_did), vid=crate::apis::urlencode(p_vid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtListResponseBtRevisionInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtListResponseBtRevisionInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAllInDocumentVersionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns 204 if no revisions are found.
pub async fn get_latest_in_document_or_company(configuration: &configuration::Configuration, cd: &str, cdid: &str, pnum: &str, et: &str) -> Result<models::BtRevisionInfo, Error<GetLatestInDocumentOrCompanyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cd = cd;
    let p_cdid = cdid;
    let p_pnum = pnum;
    let p_et = et;

    let uri_str = format!("{}/revisions/{cd}/{cdid}/p/{pnum}/latest", configuration.base_path, cd=crate::apis::urlencode(p_cd), cdid=crate::apis::urlencode(p_cdid), pnum=crate::apis::urlencode(p_pnum));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("et", &p_et.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtRevisionInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtRevisionInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLatestInDocumentOrCompanyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_revision_by_part_number(configuration: &configuration::Configuration, cid: &str, pnum: &str, revision: Option<&str>, element_type: Option<i32>) -> Result<models::BtRevisionInfo, Error<GetRevisionByPartNumberError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cid = cid;
    let p_pnum = pnum;
    let p_revision = revision;
    let p_element_type = element_type;

    let uri_str = format!("{}/revisions/c/{cid}/partnumber/{pnum}", configuration.base_path, cid=crate::apis::urlencode(p_cid), pnum=crate::apis::urlencode(p_pnum));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_revision {
        req_builder = req_builder.query(&[("revision", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_element_type {
        req_builder = req_builder.query(&[("elementType", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtRevisionInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtRevisionInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRevisionByPartNumberError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_revision_history_in_company_by_element_id(configuration: &configuration::Configuration, cid: &str, did: &str, wv: &str, wvid: &str, eid: &str, element_type: &str, link_document_id: Option<&str>, configuration2: Option<&str>, fill_approvers: Option<bool>, fill_export_permission: Option<bool>, support_change_type: Option<bool>) -> Result<models::BtRevisionListResponse, Error<GetRevisionHistoryInCompanyByElementIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cid = cid;
    let p_did = did;
    let p_wv = wv;
    let p_wvid = wvid;
    let p_eid = eid;
    let p_element_type = element_type;
    let p_link_document_id = link_document_id;
    let p_configuration = configuration2;
    let p_fill_approvers = fill_approvers;
    let p_fill_export_permission = fill_export_permission;
    let p_support_change_type = support_change_type;

    let uri_str = format!("{}/revisions/companies/{cid}/d/{did}/{wv}/{wvid}/e/{eid}", configuration.base_path, cid=crate::apis::urlencode(p_cid), did=crate::apis::urlencode(p_did), wv=crate::apis::urlencode(p_wv), wvid=crate::apis::urlencode(p_wvid), eid=crate::apis::urlencode(p_eid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_configuration {
        req_builder = req_builder.query(&[("configuration", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("elementType", &p_element_type.to_string())]);
    if let Some(ref param_value) = p_fill_approvers {
        req_builder = req_builder.query(&[("fillApprovers", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_fill_export_permission {
        req_builder = req_builder.query(&[("fillExportPermission", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_support_change_type {
        req_builder = req_builder.query(&[("supportChangeType", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtRevisionListResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtRevisionListResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRevisionHistoryInCompanyByElementIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_revision_history_in_company_by_part_id(configuration: &configuration::Configuration, cid: &str, did: &str, wv: &str, wvid: &str, eid: &str, pid: &str, configuration2: Option<&str>, link_document_id: Option<&str>, fill_approvers: Option<bool>, fill_export_permission: Option<bool>, support_change_type: Option<bool>) -> Result<models::BtRevisionListResponse, Error<GetRevisionHistoryInCompanyByPartIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cid = cid;
    let p_did = did;
    let p_wv = wv;
    let p_wvid = wvid;
    let p_eid = eid;
    let p_pid = pid;
    let p_configuration = configuration2;
    let p_link_document_id = link_document_id;
    let p_fill_approvers = fill_approvers;
    let p_fill_export_permission = fill_export_permission;
    let p_support_change_type = support_change_type;

    let uri_str = format!("{}/revisions/companies/{cid}/d/{did}/{wv}/{wvid}/e/{eid}/p/{pid}", configuration.base_path, cid=crate::apis::urlencode(p_cid), did=crate::apis::urlencode(p_did), wv=crate::apis::urlencode(p_wv), wvid=crate::apis::urlencode(p_wvid), eid=crate::apis::urlencode(p_eid), pid=crate::apis::urlencode(p_pid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_configuration {
        req_builder = req_builder.query(&[("configuration", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_link_document_id {
        req_builder = req_builder.query(&[("linkDocumentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_fill_approvers {
        req_builder = req_builder.query(&[("fillApprovers", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_fill_export_permission {
        req_builder = req_builder.query(&[("fillExportPermission", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_support_change_type {
        req_builder = req_builder.query(&[("supportChangeType", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtRevisionListResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtRevisionListResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRevisionHistoryInCompanyByPartIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// You can also request `elementType` in addition to `partNumber` since companies may or may not allow drawings to share part numbers with their parts/assemblies. To perform search without `elementType`, use `elementType` = -1 | UNKNOWN. Available element types are: -1: Unknown, 0: Part Studio, 1: Assembly, 2: Drawing, 4: Blob, 5: Application, 8: Variable Studio 10: Unknown
pub async fn get_revision_history_in_company_by_part_number(configuration: &configuration::Configuration, cid: &str, pnum: &str, element_type: &str, fill_approvers: Option<bool>, fill_export_permission: Option<bool>, support_change_type: Option<bool>) -> Result<models::BtRevisionListResponse, Error<GetRevisionHistoryInCompanyByPartNumberError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cid = cid;
    let p_pnum = pnum;
    let p_element_type = element_type;
    let p_fill_approvers = fill_approvers;
    let p_fill_export_permission = fill_export_permission;
    let p_support_change_type = support_change_type;

    let uri_str = format!("{}/revisions/companies/{cid}/partnumber/{pnum}", configuration.base_path, cid=crate::apis::urlencode(p_cid), pnum=crate::apis::urlencode(p_pnum));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("elementType", &p_element_type.to_string())]);
    if let Some(ref param_value) = p_fill_approvers {
        req_builder = req_builder.query(&[("fillApprovers", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_fill_export_permission {
        req_builder = req_builder.query(&[("fillExportPermission", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_support_change_type {
        req_builder = req_builder.query(&[("supportChangeType", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtRevisionListResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtRevisionListResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRevisionHistoryInCompanyByPartNumberError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


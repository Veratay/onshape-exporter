/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`delete_app_settings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAppSettingsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_company_app_settings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCompanyAppSettingsError {
    DefaultResponse(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_applicable_extensions_for_client`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetApplicableExtensionsForClientError {
    DefaultResponse(Vec<models::BtapiApplicationExtensionInfo>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_company_app_settings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompanyAppSettingsError {
    DefaultResponse(models::BtUserAppSettingsInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_user_app_settings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUserAppSettingsError {
    DefaultResponse(models::BtUserAppSettingsInfo),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_app_company_settings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAppCompanySettingsError {
    DefaultResponse(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_app_settings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAppSettingsError {
    DefaultResponse(serde_json::Value),
    UnknownValue(serde_json::Value),
}


/// This API is only usable with an OAuth token and only by the current user or admin.
pub async fn delete_app_settings(configuration: &configuration::Configuration, uid: &str, cid: &str, key: Option<Vec<String>>) -> Result<(), Error<DeleteAppSettingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_uid = uid;
    let p_cid = cid;
    let p_key = key;

    let uri_str = format!("{}/applications/clients/{cid}/settings/users/{uid}", configuration.base_path, uid=crate::apis::urlencode(p_uid), cid=crate::apis::urlencode(p_cid));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_key {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("key".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("key", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteAppSettingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This API is only usable with an OAuth token and only by the current user or admin.
pub async fn delete_company_app_settings(configuration: &configuration::Configuration, cpid: &str, cid: &str, key: Option<Vec<String>>) -> Result<serde_json::Value, Error<DeleteCompanyAppSettingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cpid = cpid;
    let p_cid = cid;
    let p_key = key;

    let uri_str = format!("{}/applications/clients/{cid}/settings/companies/{cpid}", configuration.base_path, cpid=crate::apis::urlencode(p_cpid), cid=crate::apis::urlencode(p_cid));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_key {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("key".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("key", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteCompanyAppSettingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_applicable_extensions_for_client(configuration: &configuration::Configuration, uid: &str, cid: &str, valid_purchases: Option<bool>) -> Result<Vec<models::BtapiApplicationExtensionInfo>, Error<GetApplicableExtensionsForClientError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_uid = uid;
    let p_cid = cid;
    let p_valid_purchases = valid_purchases;

    let uri_str = format!("{}/applications/extensions/user/{uid}/client/{cid}", configuration.base_path, uid=crate::apis::urlencode(p_uid), cid=crate::apis::urlencode(p_cid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_valid_purchases {
        req_builder = req_builder.query(&[("validPurchases", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::BtapiApplicationExtensionInfo&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::BtapiApplicationExtensionInfo&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetApplicableExtensionsForClientError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This API is only usable with an OAuth token and only by the current user or admin.
pub async fn get_company_app_settings(configuration: &configuration::Configuration, cpid: &str, cid: &str, document_id: Option<&str>, key: Option<Vec<String>>) -> Result<models::BtUserAppSettingsInfo, Error<GetCompanyAppSettingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cpid = cpid;
    let p_cid = cid;
    let p_document_id = document_id;
    let p_key = key;

    let uri_str = format!("{}/applications/clients/{cid}/settings/companies/{cpid}", configuration.base_path, cpid=crate::apis::urlencode(p_cpid), cid=crate::apis::urlencode(p_cid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_document_id {
        req_builder = req_builder.query(&[("documentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_key {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("key".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("key", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtUserAppSettingsInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtUserAppSettingsInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCompanyAppSettingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This API is only usable with an OAuth token and only by the current user or admin.
pub async fn get_user_app_settings(configuration: &configuration::Configuration, uid: &str, cid: &str, key: Option<Vec<String>>) -> Result<models::BtUserAppSettingsInfo, Error<GetUserAppSettingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_uid = uid;
    let p_cid = cid;
    let p_key = key;

    let uri_str = format!("{}/applications/clients/{cid}/settings/users/{uid}", configuration.base_path, uid=crate::apis::urlencode(p_uid), cid=crate::apis::urlencode(p_cid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_key {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("key".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("key", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtUserAppSettingsInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtUserAppSettingsInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetUserAppSettingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This API is only usable with an OAuth token and only by the current user or admin.  * Add or update a setting identified by key with value.  * Operation and field may optionally be specified when updating Map type settings.  * Field specifies the key of the setting Map to update.  * Operation may be one of:      * `ADD`: Add or update an existing field of the settings Map.      * `UPDATE`: Update an existing field of the settings Map and return an error if the field does not exist.      * `REMOVE`: Remove the field from the settings Map.  
pub async fn update_app_company_settings(configuration: &configuration::Configuration, cpid: &str, cid: &str, bt_user_app_settings_params: models::BtUserAppSettingsParams) -> Result<serde_json::Value, Error<UpdateAppCompanySettingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_cpid = cpid;
    let p_cid = cid;
    let p_bt_user_app_settings_params = bt_user_app_settings_params;

    let uri_str = format!("{}/applications/clients/{cid}/settings/companies/{cpid}", configuration.base_path, cpid=crate::apis::urlencode(p_cpid), cid=crate::apis::urlencode(p_cid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    req_builder = req_builder.json(&p_bt_user_app_settings_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateAppCompanySettingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This API is only usable with an OAuth token and only by the current user or admin.  * Add or update a setting identified by key with value.  * Operation and field may optionally be specified when updating Map type settings.  * Field specifies the key of the setting Map to update.  * Operation may be one of:      * `ADD`: Add or update an existing field of the settings Map.      * `UPDATE`: Update an existing field of the settings Map and return an error if the field does not exist.      * `REMOVE`: Remove the field from the settings Map.  
pub async fn update_app_settings(configuration: &configuration::Configuration, uid: &str, cid: &str, bt_user_app_settings_params: models::BtUserAppSettingsParams) -> Result<serde_json::Value, Error<UpdateAppSettingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_uid = uid;
    let p_cid = cid;
    let p_bt_user_app_settings_params = bt_user_app_settings_params;

    let uri_str = format!("{}/applications/clients/{cid}/settings/users/{uid}", configuration.base_path, uid=crate::apis::urlencode(p_uid), cid=crate::apis::urlencode(p_cid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    req_builder = req_builder.json(&p_bt_user_app_settings_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateAppSettingsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


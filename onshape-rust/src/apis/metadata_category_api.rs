/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_category_properties`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCategoryPropertiesError {
    DefaultResponse(models::BtListResponseBtCategoryPropertyInfo),
    UnknownValue(serde_json::Value),
}


/// An object's category specifies its type: Part, Assembly, Drawing, etc. Available properties depend on the object's category.
pub async fn get_category_properties(configuration: &configuration::Configuration, owner_id: Option<&str>, owner_type: Option<i32>, document_id: Option<&str>, category_ids: Option<Vec<String>>, object_type: Option<i32>, strict: Option<bool>, include_object_type_defaults: Option<bool>, include_computed_properties: Option<bool>, include_part_properties_table_only_properties: Option<bool>, only_active: Option<bool>, only_object_type_defaults: Option<bool>) -> Result<models::BtListResponseBtCategoryPropertyInfo, Error<GetCategoryPropertiesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner_id = owner_id;
    let p_owner_type = owner_type;
    let p_document_id = document_id;
    let p_category_ids = category_ids;
    let p_object_type = object_type;
    let p_strict = strict;
    let p_include_object_type_defaults = include_object_type_defaults;
    let p_include_computed_properties = include_computed_properties;
    let p_include_part_properties_table_only_properties = include_part_properties_table_only_properties;
    let p_only_active = only_active;
    let p_only_object_type_defaults = only_object_type_defaults;

    let uri_str = format!("{}/metadatacategory/categoryproperties", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_owner_id {
        req_builder = req_builder.query(&[("ownerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_owner_type {
        req_builder = req_builder.query(&[("ownerType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_document_id {
        req_builder = req_builder.query(&[("documentId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_category_ids {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("categoryIds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("categoryIds", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_object_type {
        req_builder = req_builder.query(&[("objectType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_strict {
        req_builder = req_builder.query(&[("strict", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_object_type_defaults {
        req_builder = req_builder.query(&[("includeObjectTypeDefaults", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_computed_properties {
        req_builder = req_builder.query(&[("includeComputedProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_part_properties_table_only_properties {
        req_builder = req_builder.query(&[("includePartPropertiesTableOnlyProperties", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_only_active {
        req_builder = req_builder.query(&[("onlyActive", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_only_object_type_defaults {
        req_builder = req_builder.query(&[("onlyObjectTypeDefaults", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtListResponseBtCategoryPropertyInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtListResponseBtCategoryPropertyInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCategoryPropertiesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


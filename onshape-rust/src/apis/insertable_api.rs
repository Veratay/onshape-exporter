/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_latest_in_document`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLatestInDocumentError {
    DefaultResponse(models::BtListResponseBtInsertableInfo),
    UnknownValue(serde_json::Value),
}


/// * Returns only the latest revision of released insertables.  * Use the document ID (`did`) parameter to specify the source document, not the insertion target.  * For example, you can insert a custom Feature library into another custom Feature library, insert Parts into an Assembly or a Drawing, etc.
pub async fn get_latest_in_document(configuration: &configuration::Configuration, did: &str, include_parts: Option<bool>, include_surfaces: Option<bool>, include_sketches: Option<bool>, include_reference_features: Option<bool>, include_assemblies: Option<bool>, include_feature_studios: Option<bool>, include_blobs: Option<bool>, allowed_blob_mime_types: Option<&str>, exclude_newer_fs_versions: Option<bool>, max_feature_script_version: Option<i32>, include_part_studios: Option<bool>, include_features: Option<bool>, include_meshes: Option<bool>, include_wires: Option<bool>, include_flattened_bodies: Option<bool>, include_applications: Option<bool>, allowed_application_mime_types: Option<&str>, include_composite_parts: Option<bool>, include_fs_tables: Option<bool>, include_fs_computed_part_property_functions: Option<bool>, include_variables: Option<bool>, include_variable_studios: Option<bool>, allowed_blob_extensions: Option<&str>, is_obsoletion: Option<bool>) -> Result<models::BtListResponseBtInsertableInfo, Error<GetLatestInDocumentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_did = did;
    let p_include_parts = include_parts;
    let p_include_surfaces = include_surfaces;
    let p_include_sketches = include_sketches;
    let p_include_reference_features = include_reference_features;
    let p_include_assemblies = include_assemblies;
    let p_include_feature_studios = include_feature_studios;
    let p_include_blobs = include_blobs;
    let p_allowed_blob_mime_types = allowed_blob_mime_types;
    let p_exclude_newer_fs_versions = exclude_newer_fs_versions;
    let p_max_feature_script_version = max_feature_script_version;
    let p_include_part_studios = include_part_studios;
    let p_include_features = include_features;
    let p_include_meshes = include_meshes;
    let p_include_wires = include_wires;
    let p_include_flattened_bodies = include_flattened_bodies;
    let p_include_applications = include_applications;
    let p_allowed_application_mime_types = allowed_application_mime_types;
    let p_include_composite_parts = include_composite_parts;
    let p_include_fs_tables = include_fs_tables;
    let p_include_fs_computed_part_property_functions = include_fs_computed_part_property_functions;
    let p_include_variables = include_variables;
    let p_include_variable_studios = include_variable_studios;
    let p_allowed_blob_extensions = allowed_blob_extensions;
    let p_is_obsoletion = is_obsoletion;

    let uri_str = format!("{}/insertables/d/{did}/latest", configuration.base_path, did=crate::apis::urlencode(p_did));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_include_parts {
        req_builder = req_builder.query(&[("includeParts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_surfaces {
        req_builder = req_builder.query(&[("includeSurfaces", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_sketches {
        req_builder = req_builder.query(&[("includeSketches", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_reference_features {
        req_builder = req_builder.query(&[("includeReferenceFeatures", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_assemblies {
        req_builder = req_builder.query(&[("includeAssemblies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_feature_studios {
        req_builder = req_builder.query(&[("includeFeatureStudios", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_blobs {
        req_builder = req_builder.query(&[("includeBlobs", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allowed_blob_mime_types {
        req_builder = req_builder.query(&[("allowedBlobMimeTypes", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_exclude_newer_fs_versions {
        req_builder = req_builder.query(&[("excludeNewerFSVersions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_feature_script_version {
        req_builder = req_builder.query(&[("maxFeatureScriptVersion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_part_studios {
        req_builder = req_builder.query(&[("includePartStudios", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_features {
        req_builder = req_builder.query(&[("includeFeatures", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_meshes {
        req_builder = req_builder.query(&[("includeMeshes", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_wires {
        req_builder = req_builder.query(&[("includeWires", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_flattened_bodies {
        req_builder = req_builder.query(&[("includeFlattenedBodies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_applications {
        req_builder = req_builder.query(&[("includeApplications", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allowed_application_mime_types {
        req_builder = req_builder.query(&[("allowedApplicationMimeTypes", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_composite_parts {
        req_builder = req_builder.query(&[("includeCompositeParts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_fs_tables {
        req_builder = req_builder.query(&[("includeFSTables", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_fs_computed_part_property_functions {
        req_builder = req_builder.query(&[("includeFSComputedPartPropertyFunctions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_variables {
        req_builder = req_builder.query(&[("includeVariables", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_variable_studios {
        req_builder = req_builder.query(&[("includeVariableStudios", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allowed_blob_extensions {
        req_builder = req_builder.query(&[("allowedBlobExtensions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_is_obsoletion {
        req_builder = req_builder.query(&[("isObsoletion", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BtListResponseBtInsertableInfo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BtListResponseBtInsertableInfo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLatestInDocumentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


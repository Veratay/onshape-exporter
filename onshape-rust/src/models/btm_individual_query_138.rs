/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "btType")]
pub enum BtmIndividualQuery138 {
    #[serde(rename="BTMIndividualCoEdgeQuery-1332")]
    BtmIndividualCoEdgeQuery1332 {
        #[serde(rename = "deterministicIdList", skip_serializing_if = "Option::is_none")]
        deterministic_id_list: Option<Box<models::BtmIndividualQueryBase139>>,
        #[serde(rename = "deterministicIds", skip_serializing_if = "Option::is_none")]
        deterministic_ids: Option<Vec<String>>,
        #[serde(rename = "generateSectionEntityQuery", skip_serializing_if = "Option::is_none")]
        generate_section_entity_query: Option<bool>,
        #[serde(rename = "generatedSectionQueryId", skip_serializing_if = "Option::is_none")]
        generated_section_query_id: Option<String>,
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "persistentQuery", skip_serializing_if = "Option::is_none")]
        persistent_query: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
        query: Option<Box<models::BtmIndividualQueryBase139>>,
        #[serde(rename = "queryStatement", skip_serializing_if = "Option::is_none")]
        query_statement: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "queryString", skip_serializing_if = "Option::is_none")]
        query_string: Option<String>,
        #[serde(rename = "variableName", skip_serializing_if = "Option::is_none")]
        variable_name: Option<Box<models::BtmIndividualQuery138>>,
    },
    #[serde(rename="BTMIndividualCreatedByQuery-137")]
    BtmIndividualCreatedByQuery137 {
        #[serde(rename = "deterministicIdList", skip_serializing_if = "Option::is_none")]
        deterministic_id_list: Option<Box<models::BtmIndividualQueryBase139>>,
        #[serde(rename = "deterministicIds", skip_serializing_if = "Option::is_none")]
        deterministic_ids: Option<Vec<String>>,
        #[serde(rename = "generateSectionEntityQuery", skip_serializing_if = "Option::is_none")]
        generate_section_entity_query: Option<bool>,
        #[serde(rename = "generatedSectionQueryId", skip_serializing_if = "Option::is_none")]
        generated_section_query_id: Option<String>,
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "persistentQuery", skip_serializing_if = "Option::is_none")]
        persistent_query: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
        query: Option<Box<models::BtmIndividualQueryBase139>>,
        #[serde(rename = "queryStatement", skip_serializing_if = "Option::is_none")]
        query_statement: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "queryString", skip_serializing_if = "Option::is_none")]
        query_string: Option<String>,
        #[serde(rename = "variableName", skip_serializing_if = "Option::is_none")]
        variable_name: Option<Box<models::BtmIndividualQuery138>>,
    },
    #[serde(rename="BTMIndividualSketchRegionQuery-140")]
    BtmIndividualSketchRegionQuery140 {
        #[serde(rename = "deterministicIdList", skip_serializing_if = "Option::is_none")]
        deterministic_id_list: Option<Box<models::BtmIndividualQueryBase139>>,
        #[serde(rename = "deterministicIds", skip_serializing_if = "Option::is_none")]
        deterministic_ids: Option<Vec<String>>,
        #[serde(rename = "generateSectionEntityQuery", skip_serializing_if = "Option::is_none")]
        generate_section_entity_query: Option<bool>,
        #[serde(rename = "generatedSectionQueryId", skip_serializing_if = "Option::is_none")]
        generated_section_query_id: Option<String>,
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "persistentQuery", skip_serializing_if = "Option::is_none")]
        persistent_query: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
        query: Option<Box<models::BtmIndividualQueryBase139>>,
        #[serde(rename = "queryStatement", skip_serializing_if = "Option::is_none")]
        query_statement: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "queryString", skip_serializing_if = "Option::is_none")]
        query_string: Option<String>,
        #[serde(rename = "variableName", skip_serializing_if = "Option::is_none")]
        variable_name: Option<Box<models::BtmIndividualQuery138>>,
    },
    #[serde(rename="BTMIndividualSketchUniqueVerticesQuery-1472")]
    BtmIndividualSketchUniqueVerticesQuery1472 {
        #[serde(rename = "deterministicIdList", skip_serializing_if = "Option::is_none")]
        deterministic_id_list: Option<Box<models::BtmIndividualQueryBase139>>,
        #[serde(rename = "deterministicIds", skip_serializing_if = "Option::is_none")]
        deterministic_ids: Option<Vec<String>>,
        #[serde(rename = "generateSectionEntityQuery", skip_serializing_if = "Option::is_none")]
        generate_section_entity_query: Option<bool>,
        #[serde(rename = "generatedSectionQueryId", skip_serializing_if = "Option::is_none")]
        generated_section_query_id: Option<String>,
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "persistentQuery", skip_serializing_if = "Option::is_none")]
        persistent_query: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
        query: Option<Box<models::BtmIndividualQueryBase139>>,
        #[serde(rename = "queryStatement", skip_serializing_if = "Option::is_none")]
        query_statement: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "queryString", skip_serializing_if = "Option::is_none")]
        query_string: Option<String>,
        #[serde(rename = "variableName", skip_serializing_if = "Option::is_none")]
        variable_name: Option<Box<models::BtmIndividualQuery138>>,
    },
}

impl Default for BtmIndividualQuery138 {
    fn default() -> Self {
        Self::BtmIndividualCoEdgeQuery1332 {
            deterministic_id_list: Default::default(),
            deterministic_ids: Default::default(),
            generate_section_entity_query: Default::default(),
            generated_section_query_id: Default::default(),
            import_microversion: Default::default(),
            node_id: Default::default(),
            persistent_query: Default::default(),
            query: Default::default(),
            query_statement: Default::default(),
            query_string: Default::default(),
            variable_name: Default::default(),
        }
        
    }
}



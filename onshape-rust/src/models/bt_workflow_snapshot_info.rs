/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtWorkflowSnapshotInfo {
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<models::BtWorkflowActionInfo>>,
    #[serde(rename = "approverIds", skip_serializing_if = "Option::is_none")]
    pub approver_ids: Option<Vec<String>>,
    #[serde(rename = "canBeDiscarded", skip_serializing_if = "Option::is_none")]
    pub can_be_discarded: Option<bool>,
    #[serde(rename = "debugMicroversionId", skip_serializing_if = "Option::is_none")]
    pub debug_microversion_id: Option<String>,
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    #[serde(rename = "isCreator", skip_serializing_if = "Option::is_none")]
    pub is_creator: Option<bool>,
    #[serde(rename = "isDiscarded", skip_serializing_if = "Option::is_none")]
    pub is_discarded: Option<bool>,
    #[serde(rename = "isFrozen", skip_serializing_if = "Option::is_none")]
    pub is_frozen: Option<bool>,
    #[serde(rename = "isSetup", skip_serializing_if = "Option::is_none")]
    pub is_setup: Option<bool>,
    #[serde(rename = "metadataState", skip_serializing_if = "Option::is_none")]
    pub metadata_state: Option<String>,
    #[serde(rename = "notifierIds", skip_serializing_if = "Option::is_none")]
    pub notifier_ids: Option<Vec<String>>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<models::BtWorkflowStateInfo>>,
    #[serde(rename = "usesExternalPlm", skip_serializing_if = "Option::is_none")]
    pub uses_external_plm: Option<bool>,
}

impl BtWorkflowSnapshotInfo {
    pub fn new() -> BtWorkflowSnapshotInfo {
        BtWorkflowSnapshotInfo {
            actions: None,
            approver_ids: None,
            can_be_discarded: None,
            debug_microversion_id: None,
            error_message: None,
            is_creator: None,
            is_discarded: None,
            is_frozen: None,
            is_setup: None,
            metadata_state: None,
            notifier_ids: None,
            state: None,
            uses_external_plm: None,
        }
    }
}


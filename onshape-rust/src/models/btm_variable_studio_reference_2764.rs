/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtmVariableStudioReference2764 {
    /// Type of JSON object.
    #[serde(rename = "btType", skip_serializing_if = "Option::is_none")]
    pub bt_type: Option<String>,
    /// Unique ID of the feature instance within this Part Studio.
    #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
    pub feature_id: Option<String>,
    /// The name of the feature spec that this feature instantiates.
    #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
    pub feature_type: Option<String>,
    /// Element microversion that is being imported.
    #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
    pub import_microversion: Option<String>,
    #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
    pub mate_connector_feature: Option<bool>,
    /// User-visible name of the feature.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
    #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// ID for the feature node.
    #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<models::BtmParameter1>>,
    /// For internal use only. Should always be `false`.
    #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
    pub return_after_subfeatures: Option<bool>,
    /// List of subfeatures belonging to the feature.
    #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
    pub sub_features: Option<Vec<models::BtmFeature134>>,
    /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
    #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
    pub suppressed: Option<bool>,
    /// `true` if the suppression is configured in the Part Studio.
    #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
    pub suppression_configured: Option<bool>,
    /// If `true`, the feature references a Variable Studio.
    #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
    pub variable_studio_reference: Option<bool>,
    #[serde(rename = "apiConfiguration", skip_serializing_if = "Option::is_none")]
    pub api_configuration: Option<Box<models::BtApiConfiguration>>,
    #[serde(rename = "configuration", skip_serializing_if = "Option::is_none")]
    pub configuration: Option<Vec<models::BtmParameter1>>,
    #[serde(rename = "documentId", skip_serializing_if = "Option::is_none")]
    pub document_id: Option<String>,
    #[serde(rename = "elementId", skip_serializing_if = "Option::is_none")]
    pub element_id: Option<String>,
    #[serde(rename = "entireVariableStudio", skip_serializing_if = "Option::is_none")]
    pub entire_variable_studio: Option<bool>,
    #[serde(rename = "isAutomatic", skip_serializing_if = "Option::is_none")]
    pub is_automatic: Option<bool>,
    #[serde(rename = "microversionId", skip_serializing_if = "Option::is_none")]
    pub microversion_id: Option<Box<models::BtMicroversionId366>>,
    #[serde(rename = "partialReference", skip_serializing_if = "Option::is_none")]
    pub partial_reference: Option<bool>,
    #[serde(rename = "referenceId", skip_serializing_if = "Option::is_none")]
    pub reference_id: Option<String>,
    #[serde(rename = "referenceNamespace", skip_serializing_if = "Option::is_none")]
    pub reference_namespace: Option<String>,
    #[serde(rename = "referenceParameter", skip_serializing_if = "Option::is_none")]
    pub reference_parameter: Option<Box<models::BtmParameterReferenceWithConfiguration3028>>,
    #[serde(rename = "unsetAutomaticEdit", skip_serializing_if = "Option::is_none")]
    pub unset_automatic_edit: Option<Box<models::BtTreeEdit13>>,
    #[serde(rename = "validRevisionReference", skip_serializing_if = "Option::is_none")]
    pub valid_revision_reference: Option<bool>,
    #[serde(rename = "variableNames", skip_serializing_if = "Option::is_none")]
    pub variable_names: Option<Vec<String>>,
    #[serde(rename = "versionId", skip_serializing_if = "Option::is_none")]
    pub version_id: Option<String>,
}

impl BtmVariableStudioReference2764 {
    pub fn new() -> BtmVariableStudioReference2764 {
        BtmVariableStudioReference2764 {
            bt_type: None,
            feature_id: None,
            feature_type: None,
            import_microversion: None,
            mate_connector_feature: None,
            name: None,
            namespace: None,
            node_id: None,
            parameters: None,
            return_after_subfeatures: None,
            sub_features: None,
            suppressed: None,
            suppression_configured: None,
            variable_studio_reference: None,
            api_configuration: None,
            configuration: None,
            document_id: None,
            element_id: None,
            entire_variable_studio: None,
            is_automatic: None,
            microversion_id: None,
            partial_reference: None,
            reference_id: None,
            reference_namespace: None,
            reference_parameter: None,
            unset_automatic_edit: None,
            valid_revision_reference: None,
            variable_names: None,
            version_id: None,
        }
    }
}


/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtPartMetadataInfo {
    #[serde(rename = "appearance", skip_serializing_if = "Option::is_none")]
    pub appearance: Option<Box<models::BtPartAppearanceInfo>>,
    #[serde(rename = "bodyType", skip_serializing_if = "Option::is_none")]
    pub body_type: Option<String>,
    #[serde(rename = "configurationId", skip_serializing_if = "Option::is_none")]
    pub configuration_id: Option<String>,
    #[serde(rename = "customProperties", skip_serializing_if = "Option::is_none")]
    pub custom_properties: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "defaultColorHash", skip_serializing_if = "Option::is_none")]
    pub default_color_hash: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "elementId", skip_serializing_if = "Option::is_none")]
    pub element_id: Option<String>,
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isFlattenedBody", skip_serializing_if = "Option::is_none")]
    pub is_flattened_body: Option<bool>,
    #[serde(rename = "isHidden", skip_serializing_if = "Option::is_none")]
    pub is_hidden: Option<bool>,
    #[serde(rename = "isMesh", skip_serializing_if = "Option::is_none")]
    pub is_mesh: Option<bool>,
    #[serde(rename = "material", skip_serializing_if = "Option::is_none")]
    pub material: Option<Box<models::BtPartMaterialInfo>>,
    #[serde(rename = "meshState", skip_serializing_if = "Option::is_none")]
    pub mesh_state: Option<models::GbtMeshState>,
    #[serde(rename = "metadataMicroversion", skip_serializing_if = "Option::is_none")]
    pub metadata_microversion: Option<String>,
    #[serde(rename = "microversionId", skip_serializing_if = "Option::is_none")]
    pub microversion_id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "ordinal", skip_serializing_if = "Option::is_none")]
    pub ordinal: Option<i32>,
    #[serde(rename = "partId", skip_serializing_if = "Option::is_none")]
    pub part_id: Option<String>,
    #[serde(rename = "partIdentity", skip_serializing_if = "Option::is_none")]
    pub part_identity: Option<String>,
    #[serde(rename = "partNumber", skip_serializing_if = "Option::is_none")]
    pub part_number: Option<String>,
    #[serde(rename = "partQuery", skip_serializing_if = "Option::is_none")]
    pub part_query: Option<String>,
    #[serde(rename = "productLine", skip_serializing_if = "Option::is_none")]
    pub product_line: Option<String>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// `0: AUTOMATIC` Set automatically, like a part name |  `1: MERGED` Merged from another Part Studio | `2: FEATURE` Custom feature | `3: UNCONFIGURED` | `4: CONFIGURED` |  `5: STANDARD_CONTENT` | `6: DEFAULT` Applied from metadata property configuration | `7: COMPUTED` Non-overriden, non-configured, computed property |  `8: COMPUTED_CONFIGURED` Property is computed in this configuration; may also be configured in other configurations  `9: IMPORT` Imported properties are handled separately
    #[serde(rename = "propertySourceTypes", skip_serializing_if = "Option::is_none")]
    pub property_source_types: Option<std::collections::HashMap<String, i32>>,
    #[serde(rename = "referencingConfiguredPartNodeIds", skip_serializing_if = "Option::is_none")]
    pub referencing_configured_part_node_ids: Option<Vec<String>>,
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<models::BtMetadataStateType>,
    #[serde(rename = "thumbnailConfigurationId", skip_serializing_if = "Option::is_none")]
    pub thumbnail_configuration_id: Option<String>,
    #[serde(rename = "thumbnailInfo", skip_serializing_if = "Option::is_none")]
    pub thumbnail_info: Option<Box<models::BtThumbnailInfo>>,
    #[serde(rename = "title1", skip_serializing_if = "Option::is_none")]
    pub title1: Option<String>,
    #[serde(rename = "title2", skip_serializing_if = "Option::is_none")]
    pub title2: Option<String>,
    #[serde(rename = "title3", skip_serializing_if = "Option::is_none")]
    pub title3: Option<String>,
    #[serde(rename = "unflattenedPartId", skip_serializing_if = "Option::is_none")]
    pub unflattened_part_id: Option<String>,
    #[serde(rename = "vendor", skip_serializing_if = "Option::is_none")]
    pub vendor: Option<String>,
}

impl BtPartMetadataInfo {
    pub fn new() -> BtPartMetadataInfo {
        BtPartMetadataInfo {
            appearance: None,
            body_type: None,
            configuration_id: None,
            custom_properties: None,
            default_color_hash: None,
            description: None,
            element_id: None,
            href: None,
            id: None,
            is_flattened_body: None,
            is_hidden: None,
            is_mesh: None,
            material: None,
            mesh_state: None,
            metadata_microversion: None,
            microversion_id: None,
            name: None,
            ordinal: None,
            part_id: None,
            part_identity: None,
            part_number: None,
            part_query: None,
            product_line: None,
            project: None,
            property_source_types: None,
            referencing_configured_part_node_ids: None,
            revision: None,
            state: None,
            thumbnail_configuration_id: None,
            thumbnail_info: None,
            title1: None,
            title2: None,
            title3: None,
            unflattened_part_id: None,
            vendor: None,
        }
    }
}


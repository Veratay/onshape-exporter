/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtAssemblyMirror2996 {
    /// Type of JSON object.
    #[serde(rename = "btType", skip_serializing_if = "Option::is_none")]
    pub bt_type: Option<String>,
    /// Microversion that resulted from the import.
    #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
    pub import_microversion: Option<String>,
    #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "assemblyInstance", skip_serializing_if = "Option::is_none")]
    pub assembly_instance: Option<bool>,
    #[serde(rename = "assemblyMirror", skip_serializing_if = "Option::is_none")]
    pub assembly_mirror: Option<bool>,
    #[serde(rename = "assemblyPattern", skip_serializing_if = "Option::is_none")]
    pub assembly_pattern: Option<bool>,
    #[serde(rename = "assemblyReplicate", skip_serializing_if = "Option::is_none")]
    pub assembly_replicate: Option<bool>,
    #[serde(rename = "clonedInstance", skip_serializing_if = "Option::is_none")]
    pub cloned_instance: Option<bool>,
    #[serde(rename = "customData", skip_serializing_if = "Option::is_none")]
    pub custom_data: Option<std::collections::HashMap<String, models::BtReferenceCustomData1551>>,
    #[serde(rename = "derivedAssemblyMirror", skip_serializing_if = "Option::is_none")]
    pub derived_assembly_mirror: Option<bool>,
    #[serde(rename = "instanceFolder", skip_serializing_if = "Option::is_none")]
    pub instance_folder: Option<bool>,
    #[serde(rename = "instanceName", skip_serializing_if = "Option::is_none")]
    pub instance_name: Option<String>,
    #[serde(rename = "isFlattenedPart", skip_serializing_if = "Option::is_none")]
    pub is_flattened_part: Option<bool>,
    #[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    #[serde(rename = "parametricInstance", skip_serializing_if = "Option::is_none")]
    pub parametric_instance: Option<bool>,
    #[serde(rename = "parametricOutputInstance", skip_serializing_if = "Option::is_none")]
    pub parametric_output_instance: Option<bool>,
    #[serde(rename = "parametricPartStudioChildInstance", skip_serializing_if = "Option::is_none")]
    pub parametric_part_studio_child_instance: Option<bool>,
    #[serde(rename = "parametricPartStudioInstance", skip_serializing_if = "Option::is_none")]
    pub parametric_part_studio_instance: Option<bool>,
    #[serde(rename = "partInstance", skip_serializing_if = "Option::is_none")]
    pub part_instance: Option<bool>,
    #[serde(rename = "releasable", skip_serializing_if = "Option::is_none")]
    pub releasable: Option<bool>,
    #[serde(rename = "revisionCustomData", skip_serializing_if = "Option::is_none")]
    pub revision_custom_data: Option<Box<models::BtRevisionCustomData2090>>,
    #[serde(rename = "standardContent", skip_serializing_if = "Option::is_none")]
    pub standard_content: Option<bool>,
    #[serde(rename = "standardContentParametersId", skip_serializing_if = "Option::is_none")]
    pub standard_content_parameters_id: Option<String>,
    #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
    pub suppressed: Option<bool>,
    #[serde(rename = "suppressedFieldIndex", skip_serializing_if = "Option::is_none")]
    pub suppressed_field_index: Option<i32>,
    /// `true` if the suppression is configured in the Part Studio.
    #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
    pub suppression_configured: Option<bool>,
    #[serde(rename = "suppressionState", skip_serializing_if = "Option::is_none")]
    pub suppression_state: Option<Box<models::BtmSuppressionState1924>>,
    #[serde(rename = "validRevisionReference", skip_serializing_if = "Option::is_none")]
    pub valid_revision_reference: Option<bool>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    #[serde(rename = "feature", skip_serializing_if = "Option::is_none")]
    pub feature: Option<Box<models::BtmAssemblyFeature887>>,
    #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
    pub feature_id: Option<String>,
    #[serde(rename = "instanceControlNodes", skip_serializing_if = "Option::is_none")]
    pub instance_control_nodes: Option<Vec<models::BtInstanceControlNode750>>,
    #[serde(rename = "seedBasedParametricInstance", skip_serializing_if = "Option::is_none")]
    pub seed_based_parametric_instance: Option<bool>,
    #[serde(rename = "mirrorFeature", skip_serializing_if = "Option::is_none")]
    pub mirror_feature: Option<Box<models::BtmAssemblyMirrorFeature3037>>,
    #[serde(rename = "nodeWithReferenceList", skip_serializing_if = "Option::is_none")]
    pub node_with_reference_list: Option<Vec<models::BtNodeWithReference>>,
}

impl BtAssemblyMirror2996 {
    pub fn new() -> BtAssemblyMirror2996 {
        BtAssemblyMirror2996 {
            bt_type: None,
            import_microversion: None,
            node_id: None,
            assembly_instance: None,
            assembly_mirror: None,
            assembly_pattern: None,
            assembly_replicate: None,
            cloned_instance: None,
            custom_data: None,
            derived_assembly_mirror: None,
            instance_folder: None,
            instance_name: None,
            is_flattened_part: None,
            locked: None,
            parametric_instance: None,
            parametric_output_instance: None,
            parametric_part_studio_child_instance: None,
            parametric_part_studio_instance: None,
            part_instance: None,
            releasable: None,
            revision_custom_data: None,
            standard_content: None,
            standard_content_parameters_id: None,
            suppressed: None,
            suppressed_field_index: None,
            suppression_configured: None,
            suppression_state: None,
            valid_revision_reference: None,
            version: None,
            feature: None,
            feature_id: None,
            instance_control_nodes: None,
            seed_based_parametric_instance: None,
            mirror_feature: None,
            node_with_reference_list: None,
        }
    }
}


/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtMoveElementParams {
    #[serde(rename = "anchorElementId", skip_serializing_if = "Option::is_none")]
    pub anchor_element_id: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "elementOriginalToNewMap", skip_serializing_if = "Option::is_none")]
    pub element_original_to_new_map: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "elements", skip_serializing_if = "Option::is_none")]
    pub elements: Option<Vec<String>>,
    #[serde(rename = "generateUnknownMessages", skip_serializing_if = "Option::is_none")]
    pub generate_unknown_messages: Option<bool>,
    #[serde(rename = "importData", skip_serializing_if = "Option::is_none")]
    pub import_data: Option<Vec<String>>,
    #[serde(rename = "isCopy", skip_serializing_if = "Option::is_none")]
    pub is_copy: Option<bool>,
    #[serde(rename = "isDeepCopy", skip_serializing_if = "Option::is_none")]
    pub is_deep_copy: Option<bool>,
    #[serde(rename = "isGroupAnchor", skip_serializing_if = "Option::is_none")]
    pub is_group_anchor: Option<bool>,
    #[serde(rename = "isNewDocument", skip_serializing_if = "Option::is_none")]
    pub is_new_document: Option<bool>,
    #[serde(rename = "isPublic", skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    #[serde(rename = "isSelectivePartOut", skip_serializing_if = "Option::is_none")]
    pub is_selective_part_out: Option<bool>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "needNewVersion", skip_serializing_if = "Option::is_none")]
    pub need_new_version: Option<bool>,
    #[serde(rename = "ownerEmail", skip_serializing_if = "Option::is_none")]
    pub owner_email: Option<String>,
    #[serde(rename = "ownerId", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    #[serde(rename = "ownerType", skip_serializing_if = "Option::is_none")]
    pub owner_type: Option<i32>,
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "selectedGroupIds", skip_serializing_if = "Option::is_none")]
    pub selected_group_ids: Option<Vec<String>>,
    #[serde(rename = "sourceDocumentId", skip_serializing_if = "Option::is_none")]
    pub source_document_id: Option<String>,
    #[serde(rename = "sourceVersionId", skip_serializing_if = "Option::is_none")]
    pub source_version_id: Option<String>,
    #[serde(rename = "sourceWorkspaceId", skip_serializing_if = "Option::is_none")]
    pub source_workspace_id: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "targetDocumentId", skip_serializing_if = "Option::is_none")]
    pub target_document_id: Option<String>,
    #[serde(rename = "targetWorkspaceId", skip_serializing_if = "Option::is_none")]
    pub target_workspace_id: Option<String>,
    #[serde(rename = "versionName", skip_serializing_if = "Option::is_none")]
    pub version_name: Option<String>,
}

impl BtMoveElementParams {
    pub fn new() -> BtMoveElementParams {
        BtMoveElementParams {
            anchor_element_id: None,
            description: None,
            element_original_to_new_map: None,
            elements: None,
            generate_unknown_messages: None,
            import_data: None,
            is_copy: None,
            is_deep_copy: None,
            is_group_anchor: None,
            is_new_document: None,
            is_public: None,
            is_selective_part_out: None,
            name: None,
            need_new_version: None,
            owner_email: None,
            owner_id: None,
            owner_type: None,
            parent_id: None,
            project_id: None,
            selected_group_ids: None,
            source_document_id: None,
            source_version_id: None,
            source_workspace_id: None,
            tags: None,
            target_document_id: None,
            target_workspace_id: None,
            version_name: None,
        }
    }
}


/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GbtuiHint {
    #[serde(rename = "OPPOSITE_DIRECTION")]
    OppositeDirection,
    #[serde(rename = "ALWAYS_HIDDEN")]
    AlwaysHidden,
    #[serde(rename = "SHOW_CREATE_SELECTION")]
    ShowCreateSelection,
    #[serde(rename = "CONTROL_VISIBILITY")]
    ControlVisibility,
    #[serde(rename = "NO_PREVIEW_PROVIDED")]
    NoPreviewProvided,
    #[serde(rename = "REMEMBER_PREVIOUS_VALUE")]
    RememberPreviousValue,
    #[serde(rename = "DISPLAY_SHORT")]
    DisplayShort,
    #[serde(rename = "ALLOW_FEATURE_SELECTION")]
    AllowFeatureSelection,
    #[serde(rename = "MATE_CONNECTOR_AXIS_TYPE")]
    MateConnectorAxisType,
    #[serde(rename = "PRIMARY_AXIS")]
    PrimaryAxis,
    #[serde(rename = "SHOW_EXPRESSION")]
    ShowExpression,
    #[serde(rename = "OPPOSITE_DIRECTION_CIRCULAR")]
    OppositeDirectionCircular,
    #[serde(rename = "SHOW_LABEL")]
    ShowLabel,
    #[serde(rename = "HORIZONTAL_ENUM")]
    HorizontalEnum,
    #[serde(rename = "UNCONFIGURABLE")]
    Unconfigurable,
    #[serde(rename = "MATCH_LAST_ARRAY_ITEM")]
    MatchLastArrayItem,
    #[serde(rename = "COLLAPSE_ARRAY_ITEMS")]
    CollapseArrayItems,
    #[serde(rename = "INITIAL_FOCUS_ON_EDIT")]
    InitialFocusOnEdit,
    #[serde(rename = "INITIAL_FOCUS")]
    InitialFocus,
    #[serde(rename = "DISPLAY_CURRENT_VALUE_ONLY")]
    DisplayCurrentValueOnly,
    #[serde(rename = "READ_ONLY")]
    ReadOnly,
    #[serde(rename = "PREVENT_CREATING_NEW_MATE_CONNECTORS")]
    PreventCreatingNewMateConnectors,
    #[serde(rename = "FIRST_IN_ROW")]
    FirstInRow,
    #[serde(rename = "ALLOW_QUERY_ORDER")]
    AllowQueryOrder,
    #[serde(rename = "PREVENT_ARRAY_REORDER")]
    PreventArrayReorder,
    #[serde(rename = "VARIABLE_NAME")]
    VariableName,
    #[serde(rename = "FOCUS_INNER_QUERY")]
    FocusInnerQuery,
    #[serde(rename = "SHOW_TOLERANCE")]
    ShowTolerance,
    #[serde(rename = "ALLOW_ARRAY_FOCUS")]
    AllowArrayFocus,
    #[serde(rename = "SHOW_INLINE_CONFIG_INPUTS")]
    ShowInlineConfigInputs,
    #[serde(rename = "FOCUS_ON_VISIBLE")]
    FocusOnVisible,
    #[serde(rename = "CAN_BE_TOLERANT")]
    CanBeTolerant,
    #[serde(rename = "CAN_BE_TOLERANT_DIAMETER")]
    CanBeTolerantDiameter,
    #[serde(rename = "PLUS_MINUS")]
    PlusMinus,
    #[serde(rename = "ALWAYS_USE_DEPENDENCIES")]
    AlwaysUseDependencies,
    #[serde(rename = "UNKNOWN")]
    Unknown,

}

impl std::fmt::Display for GbtuiHint {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::OppositeDirection => write!(f, "OPPOSITE_DIRECTION"),
            Self::AlwaysHidden => write!(f, "ALWAYS_HIDDEN"),
            Self::ShowCreateSelection => write!(f, "SHOW_CREATE_SELECTION"),
            Self::ControlVisibility => write!(f, "CONTROL_VISIBILITY"),
            Self::NoPreviewProvided => write!(f, "NO_PREVIEW_PROVIDED"),
            Self::RememberPreviousValue => write!(f, "REMEMBER_PREVIOUS_VALUE"),
            Self::DisplayShort => write!(f, "DISPLAY_SHORT"),
            Self::AllowFeatureSelection => write!(f, "ALLOW_FEATURE_SELECTION"),
            Self::MateConnectorAxisType => write!(f, "MATE_CONNECTOR_AXIS_TYPE"),
            Self::PrimaryAxis => write!(f, "PRIMARY_AXIS"),
            Self::ShowExpression => write!(f, "SHOW_EXPRESSION"),
            Self::OppositeDirectionCircular => write!(f, "OPPOSITE_DIRECTION_CIRCULAR"),
            Self::ShowLabel => write!(f, "SHOW_LABEL"),
            Self::HorizontalEnum => write!(f, "HORIZONTAL_ENUM"),
            Self::Unconfigurable => write!(f, "UNCONFIGURABLE"),
            Self::MatchLastArrayItem => write!(f, "MATCH_LAST_ARRAY_ITEM"),
            Self::CollapseArrayItems => write!(f, "COLLAPSE_ARRAY_ITEMS"),
            Self::InitialFocusOnEdit => write!(f, "INITIAL_FOCUS_ON_EDIT"),
            Self::InitialFocus => write!(f, "INITIAL_FOCUS"),
            Self::DisplayCurrentValueOnly => write!(f, "DISPLAY_CURRENT_VALUE_ONLY"),
            Self::ReadOnly => write!(f, "READ_ONLY"),
            Self::PreventCreatingNewMateConnectors => write!(f, "PREVENT_CREATING_NEW_MATE_CONNECTORS"),
            Self::FirstInRow => write!(f, "FIRST_IN_ROW"),
            Self::AllowQueryOrder => write!(f, "ALLOW_QUERY_ORDER"),
            Self::PreventArrayReorder => write!(f, "PREVENT_ARRAY_REORDER"),
            Self::VariableName => write!(f, "VARIABLE_NAME"),
            Self::FocusInnerQuery => write!(f, "FOCUS_INNER_QUERY"),
            Self::ShowTolerance => write!(f, "SHOW_TOLERANCE"),
            Self::AllowArrayFocus => write!(f, "ALLOW_ARRAY_FOCUS"),
            Self::ShowInlineConfigInputs => write!(f, "SHOW_INLINE_CONFIG_INPUTS"),
            Self::FocusOnVisible => write!(f, "FOCUS_ON_VISIBLE"),
            Self::CanBeTolerant => write!(f, "CAN_BE_TOLERANT"),
            Self::CanBeTolerantDiameter => write!(f, "CAN_BE_TOLERANT_DIAMETER"),
            Self::PlusMinus => write!(f, "PLUS_MINUS"),
            Self::AlwaysUseDependencies => write!(f, "ALWAYS_USE_DEPENDENCIES"),
            Self::Unknown => write!(f, "UNKNOWN"),
        }
    }
}

impl Default for GbtuiHint {
    fn default() -> GbtuiHint {
        Self::OppositeDirection
    }
}


/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "btType")]
pub enum BtFeatureApiBase1430 {
    #[serde(rename="BTAssemblyFeatureListResponse-1174")]
    BtAssemblyFeatureListResponse1174 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTConfigurationResponse-2019")]
    BtConfigurationResponse2019 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTConfigurationUpdateCall-2933")]
    BtConfigurationUpdateCall2933 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTFeatureDefinitionCall-1406")]
    BtFeatureDefinitionCall1406 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTFeatureDefinitionResponse-1617")]
    BtFeatureDefinitionResponse1617 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTFeatureListResponse-2457")]
    BtFeatureListResponse2457 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTFeatureScriptEvalCall-2377")]
    BtFeatureScriptEvalCall2377 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTFeatureScriptEvalResponse-1859")]
    BtFeatureScriptEvalResponse1859 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTFeatureSpecsResponse-664")]
    BtFeatureSpecsResponse664 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTFeatureStudioContents-2239")]
    BtFeatureStudioContents2239 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTSetFeatureRollbackCall-1899")]
    BtSetFeatureRollbackCall1899 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTSetFeatureRollbackResponse-1042")]
    BtSetFeatureRollbackResponse1042 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTUpdateFeaturesCall-1748")]
    BtUpdateFeaturesCall1748 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
    #[serde(rename="BTUpdateFeaturesResponse-1333")]
    BtUpdateFeaturesResponse1333 {
        /// FeatureScript version used in the Part Studio. Do not modify.
        #[serde(rename = "libraryVersion", skip_serializing_if = "Option::is_none")]
        library_version: Option<i32>,
        /// On output, `true` indicates a microversion mismatch was encountered.
        #[serde(rename = "microversionSkew", skip_serializing_if = "Option::is_none")]
        microversion_skew: Option<bool>,
        /// If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
        #[serde(rename = "rejectMicroversionSkew", skip_serializing_if = "Option::is_none")]
        reject_microversion_skew: Option<bool>,
        /// Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
        #[serde(rename = "serializationVersion", skip_serializing_if = "Option::is_none")]
        serialization_version: Option<String>,
        /// The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
        #[serde(rename = "sourceMicroversion", skip_serializing_if = "Option::is_none")]
        source_microversion: Option<String>,
    },
}

impl Default for BtFeatureApiBase1430 {
    fn default() -> Self {
        Self::BtAssemblyFeatureListResponse1174 {
            library_version: Default::default(),
            microversion_skew: Default::default(),
            reject_microversion_skew: Default::default(),
            serialization_version: Default::default(),
            source_microversion: Default::default(),
        }
        
    }
}



/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// BtmParameter1 : A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "btType")]
pub enum BtmParameter1 {
    #[serde(rename="BTMDatabaseParameter-2229")]
    BtmDatabaseParameter2229 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterAppearance-627")]
    BtmParameterAppearance627 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterArray-2025")]
    BtmParameterArray2025 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterBlobReference-1679")]
    BtmParameterBlobReference1679 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterBoolean-144")]
    BtmParameterBoolean144 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterButton-5169")]
    BtmParameterButton5169 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterConfigured-2222")]
    BtmParameterConfigured2222 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterDerived-864")]
    BtmParameterDerived864 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterEnum-145")]
    BtmParameterEnum145 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterFeatureList-1749")]
    BtmParameterFeatureList1749 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterForeignId-146")]
    BtmParameterForeignId146 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterInvalid-1664")]
    BtmParameterInvalid1664 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterLookupTablePath-1419")]
    BtmParameterLookupTablePath1419 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterMaterial-1388")]
    BtmParameterMaterial1388 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterMultiEnum-3411")]
    BtmParameterMultiEnum3411 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterQuantity-147")]
    BtmParameterQuantity147 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterQueryList-148")]
    BtmParameterQueryList148 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterQueryWithOccurrenceList-67")]
    BtmParameterQueryWithOccurrenceList67 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterReference-2434")]
    BtmParameterReference2434 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMParameterString-149")]
    BtmParameterString149 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
    #[serde(rename="BTMReadOnlyParameter-3800")]
    BtmReadOnlyParameter3800 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        /// ID of the parameter's node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// Unique ID of the parameter.
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
    },
}

impl Default for BtmParameter1 {
    fn default() -> Self {
        Self::BtmDatabaseParameter2229 {
            import_microversion: Default::default(),
            node_id: Default::default(),
            parameter_id: Default::default(),
        }
        
    }
}



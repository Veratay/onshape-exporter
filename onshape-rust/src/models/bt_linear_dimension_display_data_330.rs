/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "btType")]
pub enum BtLinearDimensionDisplayData330 {
    #[serde(rename="BTCenterlineDimensionDisplayData-1798")]
    BtCenterlineDimensionDisplayData1798 {
        #[serde(rename = "coordinateSystem", skip_serializing_if = "Option::is_none")]
        coordinate_system: Option<Box<models::BtMatrix3x3340>>,
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        #[serde(rename = "fitClass", skip_serializing_if = "Option::is_none")]
        fit_class: Option<String>,
        #[serde(rename = "hasMaximumLimit", skip_serializing_if = "Option::is_none")]
        has_maximum_limit: Option<bool>,
        #[serde(rename = "hasMinimumLimit", skip_serializing_if = "Option::is_none")]
        has_minimum_limit: Option<bool>,
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        #[serde(rename = "isAnnotationDimension", skip_serializing_if = "Option::is_none")]
        is_annotation_dimension: Option<bool>,
        #[serde(rename = "isAssociatedWithFlat", skip_serializing_if = "Option::is_none")]
        is_associated_with_flat: Option<bool>,
        #[serde(rename = "isDriven", skip_serializing_if = "Option::is_none")]
        is_driven: Option<bool>,
        #[serde(rename = "isOverDefined", skip_serializing_if = "Option::is_none")]
        is_over_defined: Option<bool>,
        #[serde(rename = "lowerTolerance", skip_serializing_if = "Option::is_none")]
        lower_tolerance: Option<f64>,
        #[serde(rename = "maximumLimit", skip_serializing_if = "Option::is_none")]
        maximum_limit: Option<f64>,
        #[serde(rename = "minimumLimit", skip_serializing_if = "Option::is_none")]
        minimum_limit: Option<f64>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "partId", skip_serializing_if = "Option::is_none")]
        part_id: Option<String>,
        #[serde(rename = "planeMatrix", skip_serializing_if = "Option::is_none")]
        plane_matrix: Option<Box<models::BtbsMatrix386>>,
        #[serde(rename = "precision", skip_serializing_if = "Option::is_none")]
        precision: Option<models::GbtTolerancePrecision>,
        #[serde(rename = "toleranceType", skip_serializing_if = "Option::is_none")]
        tolerance_type: Option<models::GbtToleranceType>,
        #[serde(rename = "upperTolerance", skip_serializing_if = "Option::is_none")]
        upper_tolerance: Option<f64>,
        #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
        value: Option<f64>,
        #[serde(rename = "hasExtension", skip_serializing_if = "Option::is_none")]
        has_extension: Option<bool>,
        #[serde(rename = "positionX", skip_serializing_if = "Option::is_none")]
        position_x: Option<f64>,
        #[serde(rename = "positionY", skip_serializing_if = "Option::is_none")]
        position_y: Option<f64>,
        #[serde(rename = "witnessEndPoint0X", skip_serializing_if = "Option::is_none")]
        witness_end_point0_x: Option<f64>,
        #[serde(rename = "witnessEndPoint0Y", skip_serializing_if = "Option::is_none")]
        witness_end_point0_y: Option<f64>,
        #[serde(rename = "witnessEndPoint1X", skip_serializing_if = "Option::is_none")]
        witness_end_point1_x: Option<f64>,
        #[serde(rename = "witnessEndPoint1Y", skip_serializing_if = "Option::is_none")]
        witness_end_point1_y: Option<f64>,
        #[serde(rename = "witnessExtension0Z", skip_serializing_if = "Option::is_none")]
        witness_extension0_z: Option<f64>,
        #[serde(rename = "witnessExtension1Z", skip_serializing_if = "Option::is_none")]
        witness_extension1_z: Option<f64>,
    },
    #[serde(rename="BTEllipseDiameterDimensionDisplayData-1301")]
    BtEllipseDiameterDimensionDisplayData1301 {
        #[serde(rename = "coordinateSystem", skip_serializing_if = "Option::is_none")]
        coordinate_system: Option<Box<models::BtMatrix3x3340>>,
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        #[serde(rename = "fitClass", skip_serializing_if = "Option::is_none")]
        fit_class: Option<String>,
        #[serde(rename = "hasMaximumLimit", skip_serializing_if = "Option::is_none")]
        has_maximum_limit: Option<bool>,
        #[serde(rename = "hasMinimumLimit", skip_serializing_if = "Option::is_none")]
        has_minimum_limit: Option<bool>,
        #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
        id: Option<String>,
        #[serde(rename = "isAnnotationDimension", skip_serializing_if = "Option::is_none")]
        is_annotation_dimension: Option<bool>,
        #[serde(rename = "isAssociatedWithFlat", skip_serializing_if = "Option::is_none")]
        is_associated_with_flat: Option<bool>,
        #[serde(rename = "isDriven", skip_serializing_if = "Option::is_none")]
        is_driven: Option<bool>,
        #[serde(rename = "isOverDefined", skip_serializing_if = "Option::is_none")]
        is_over_defined: Option<bool>,
        #[serde(rename = "lowerTolerance", skip_serializing_if = "Option::is_none")]
        lower_tolerance: Option<f64>,
        #[serde(rename = "maximumLimit", skip_serializing_if = "Option::is_none")]
        maximum_limit: Option<f64>,
        #[serde(rename = "minimumLimit", skip_serializing_if = "Option::is_none")]
        minimum_limit: Option<f64>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "partId", skip_serializing_if = "Option::is_none")]
        part_id: Option<String>,
        #[serde(rename = "planeMatrix", skip_serializing_if = "Option::is_none")]
        plane_matrix: Option<Box<models::BtbsMatrix386>>,
        #[serde(rename = "precision", skip_serializing_if = "Option::is_none")]
        precision: Option<models::GbtTolerancePrecision>,
        #[serde(rename = "toleranceType", skip_serializing_if = "Option::is_none")]
        tolerance_type: Option<models::GbtToleranceType>,
        #[serde(rename = "upperTolerance", skip_serializing_if = "Option::is_none")]
        upper_tolerance: Option<f64>,
        #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
        value: Option<f64>,
        #[serde(rename = "hasExtension", skip_serializing_if = "Option::is_none")]
        has_extension: Option<bool>,
        #[serde(rename = "positionX", skip_serializing_if = "Option::is_none")]
        position_x: Option<f64>,
        #[serde(rename = "positionY", skip_serializing_if = "Option::is_none")]
        position_y: Option<f64>,
        #[serde(rename = "witnessEndPoint0X", skip_serializing_if = "Option::is_none")]
        witness_end_point0_x: Option<f64>,
        #[serde(rename = "witnessEndPoint0Y", skip_serializing_if = "Option::is_none")]
        witness_end_point0_y: Option<f64>,
        #[serde(rename = "witnessEndPoint1X", skip_serializing_if = "Option::is_none")]
        witness_end_point1_x: Option<f64>,
        #[serde(rename = "witnessEndPoint1Y", skip_serializing_if = "Option::is_none")]
        witness_end_point1_y: Option<f64>,
        #[serde(rename = "witnessExtension0Z", skip_serializing_if = "Option::is_none")]
        witness_extension0_z: Option<f64>,
        #[serde(rename = "witnessExtension1Z", skip_serializing_if = "Option::is_none")]
        witness_extension1_z: Option<f64>,
    },
}

impl Default for BtLinearDimensionDisplayData330 {
    fn default() -> Self {
        Self::BtCenterlineDimensionDisplayData1798 {
            coordinate_system: Default::default(),
            feature_id: Default::default(),
            fit_class: Default::default(),
            has_maximum_limit: Default::default(),
            has_minimum_limit: Default::default(),
            id: Default::default(),
            is_annotation_dimension: Default::default(),
            is_associated_with_flat: Default::default(),
            is_driven: Default::default(),
            is_over_defined: Default::default(),
            lower_tolerance: Default::default(),
            maximum_limit: Default::default(),
            minimum_limit: Default::default(),
            parameter_id: Default::default(),
            part_id: Default::default(),
            plane_matrix: Default::default(),
            precision: Default::default(),
            tolerance_type: Default::default(),
            upper_tolerance: Default::default(),
            value: Default::default(),
            has_extension: Default::default(),
            position_x: Default::default(),
            position_y: Default::default(),
            witness_end_point0_x: Default::default(),
            witness_end_point0_y: Default::default(),
            witness_end_point1_x: Default::default(),
            witness_end_point1_y: Default::default(),
            witness_extension0_z: Default::default(),
            witness_extension1_z: Default::default(),
        }
        
    }
}



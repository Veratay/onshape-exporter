/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtTranslateFormatParams {
    /// If true, parts with faults are imported. If false, faulty parts are omitted.
    #[serde(rename = "allowFaultyParts", skip_serializing_if = "Option::is_none")]
    pub allow_faulty_parts: Option<bool>,
    /// Determines the maximum angular deviation, between the analytical surface and its triangulation. Lower values result in a finer geometry and higher values result in coarser geometry.
    #[serde(rename = "angularTolerance", skip_serializing_if = "Option::is_none")]
    pub angular_tolerance: Option<f64>,
    #[serde(rename = "blobElementId", skip_serializing_if = "Option::is_none")]
    pub blob_element_id: Option<String>,
    #[serde(rename = "blobMicroversionId", skip_serializing_if = "Option::is_none")]
    pub blob_microversion_id: Option<String>,
    #[serde(rename = "cloudObjectId", skip_serializing_if = "Option::is_none")]
    pub cloud_object_id: Option<String>,
    #[serde(rename = "cloudStorageAccountId", skip_serializing_if = "Option::is_none")]
    pub cloud_storage_account_id: Option<String>,
    #[serde(rename = "colorMethod", skip_serializing_if = "Option::is_none")]
    pub color_method: Option<String>,
    #[serde(rename = "configuration", skip_serializing_if = "Option::is_none")]
    pub configuration: Option<String>,
    #[serde(rename = "connectionId", skip_serializing_if = "Option::is_none")]
    pub connection_id: Option<String>,
    #[serde(rename = "createComposite", skip_serializing_if = "Option::is_none")]
    pub create_composite: Option<bool>,
    #[serde(rename = "currentSheetOnly", skip_serializing_if = "Option::is_none")]
    pub current_sheet_only: Option<bool>,
    #[serde(rename = "destinationName", skip_serializing_if = "Option::is_none")]
    pub destination_name: Option<String>,
    #[serde(rename = "distanceTolerance", skip_serializing_if = "Option::is_none")]
    pub distance_tolerance: Option<f64>,
    /// The id of the element in which to perform the operation.
    #[serde(rename = "elementId", skip_serializing_if = "Option::is_none")]
    pub element_id: Option<String>,
    /// An array of element ids for multi-element export.
    #[serde(rename = "elementIds", skip_serializing_if = "Option::is_none")]
    pub element_ids: Option<Vec<String>>,
    #[serde(rename = "emailLink", skip_serializing_if = "Option::is_none")]
    pub email_link: Option<bool>,
    #[serde(rename = "emailMessage", skip_serializing_if = "Option::is_none")]
    pub email_message: Option<String>,
    #[serde(rename = "emailSubject", skip_serializing_if = "Option::is_none")]
    pub email_subject: Option<String>,
    #[serde(rename = "emailTo", skip_serializing_if = "Option::is_none")]
    pub email_to: Option<Vec<String>>,
    /// Set to `true` to evaluate the export rule for the given `formatName` and to include an `exportRuleFileName` value in the response.
    #[serde(rename = "evaluateExportRule", skip_serializing_if = "Option::is_none")]
    pub evaluate_export_rule: Option<bool>,
    #[serde(rename = "excludeHiddenEntities", skip_serializing_if = "Option::is_none")]
    pub exclude_hidden_entities: Option<bool>,
    #[serde(rename = "excludeOffSheetContent", skip_serializing_if = "Option::is_none")]
    pub exclude_off_sheet_content: Option<bool>,
    #[serde(rename = "extractAssemblyHierarchy", skip_serializing_if = "Option::is_none")]
    pub extract_assembly_hierarchy: Option<bool>,
    #[serde(rename = "flatten", skip_serializing_if = "Option::is_none")]
    pub flatten: Option<bool>,
    #[serde(rename = "flattenAssemblies", skip_serializing_if = "Option::is_none")]
    pub flatten_assemblies: Option<bool>,
    #[serde(rename = "foreignId", skip_serializing_if = "Option::is_none")]
    pub foreign_id: Option<String>,
    /// The name of the file format.
    #[serde(rename = "formatName")]
    pub format_name: String,
    #[serde(rename = "fromUserId", skip_serializing_if = "Option::is_none")]
    pub from_user_id: Option<String>,
    #[serde(rename = "getyAxisIsUp", skip_serializing_if = "Option::is_none")]
    pub gety_axis_is_up: Option<bool>,
    #[serde(rename = "grouping", skip_serializing_if = "Option::is_none")]
    pub grouping: Option<bool>,
    #[serde(rename = "hideInspectionItems", skip_serializing_if = "Option::is_none")]
    pub hide_inspection_items: Option<bool>,
    #[serde(rename = "ignoreExportRulesForContents", skip_serializing_if = "Option::is_none")]
    pub ignore_export_rules_for_contents: Option<bool>,
    #[serde(rename = "imageHeight", skip_serializing_if = "Option::is_none")]
    pub image_height: Option<i32>,
    #[serde(rename = "imageWidth", skip_serializing_if = "Option::is_none")]
    pub image_width: Option<i32>,
    #[serde(rename = "importAppearances", skip_serializing_if = "Option::is_none")]
    pub import_appearances: Option<bool>,
    #[serde(rename = "importInBackground", skip_serializing_if = "Option::is_none")]
    pub import_in_background: Option<bool>,
    #[serde(rename = "importMaterialDensity", skip_serializing_if = "Option::is_none")]
    pub import_material_density: Option<bool>,
    #[serde(rename = "importWithinDocument", skip_serializing_if = "Option::is_none")]
    pub import_within_document: Option<bool>,
    #[serde(rename = "includeExportIds", skip_serializing_if = "Option::is_none")]
    pub include_export_ids: Option<bool>,
    #[serde(rename = "joinAdjacentSurfaces", skip_serializing_if = "Option::is_none")]
    pub join_adjacent_surfaces: Option<bool>,
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
    #[serde(rename = "linkDocumentId", skip_serializing_if = "Option::is_none")]
    pub link_document_id: Option<String>,
    #[serde(rename = "linkDocumentWorkspaceId", skip_serializing_if = "Option::is_none")]
    pub link_document_workspace_id: Option<String>,
    /// Determines the maximum distance, between the analytical surface and its triangulation. Lower values result in a finer geometry and higher values result in coarser geometry.
    #[serde(rename = "maximumChordLength", skip_serializing_if = "Option::is_none")]
    pub maximum_chord_length: Option<f64>,
    #[serde(rename = "notifyUser", skip_serializing_if = "Option::is_none")]
    pub notify_user: Option<bool>,
    #[serde(rename = "occurrencesToExport", skip_serializing_if = "Option::is_none")]
    pub occurrences_to_export: Option<String>,
    #[serde(rename = "onePartPerDoc", skip_serializing_if = "Option::is_none")]
    pub one_part_per_doc: Option<bool>,
    #[serde(rename = "originalForeignId", skip_serializing_if = "Option::is_none")]
    pub original_foreign_id: Option<String>,
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(rename = "partIds", skip_serializing_if = "Option::is_none")]
    pub part_ids: Option<String>,
    #[serde(rename = "partsExportFilter", skip_serializing_if = "Option::is_none")]
    pub parts_export_filter: Option<Box<models::BtPartsExportFilter4308>>,
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "passwordRequired", skip_serializing_if = "Option::is_none")]
    pub password_required: Option<bool>,
    #[serde(rename = "pdfVersion", skip_serializing_if = "Option::is_none")]
    pub pdf_version: Option<String>,
    #[serde(rename = "processedForeignId", skip_serializing_if = "Option::is_none")]
    pub processed_foreign_id: Option<String>,
    #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "proxyDocumentId", skip_serializing_if = "Option::is_none")]
    pub proxy_document_id: Option<String>,
    #[serde(rename = "proxyElementId", skip_serializing_if = "Option::is_none")]
    pub proxy_element_id: Option<String>,
    #[serde(rename = "proxyWorkspaceVersion", skip_serializing_if = "Option::is_none")]
    pub proxy_workspace_version: Option<String>,
    #[serde(rename = "proxyWorkspaceVersionId", skip_serializing_if = "Option::is_none")]
    pub proxy_workspace_version_id: Option<String>,
    /// Determines export resolution of fine, medium, or coarse
    #[serde(rename = "resolution", skip_serializing_if = "Option::is_none")]
    pub resolution: Option<Resolution>,
    #[serde(rename = "rhinoVersion", skip_serializing_if = "Option::is_none")]
    pub rhino_version: Option<models::GbtRhinoVersions>,
    #[serde(rename = "selectablePdfText", skip_serializing_if = "Option::is_none")]
    pub selectable_pdf_text: Option<bool>,
    #[serde(rename = "sendCopyToMe", skip_serializing_if = "Option::is_none")]
    pub send_copy_to_me: Option<bool>,
    #[serde(rename = "sheetIndices", skip_serializing_if = "Option::is_none")]
    pub sheet_indices: Option<Vec<i32>>,
    #[serde(rename = "showOverriddenDimensions", skip_serializing_if = "Option::is_none")]
    pub show_overridden_dimensions: Option<bool>,
    #[serde(rename = "skipBodyshop", skip_serializing_if = "Option::is_none")]
    pub skip_bodyshop: Option<bool>,
    #[serde(rename = "sourceName", skip_serializing_if = "Option::is_none")]
    pub source_name: Option<String>,
    #[serde(rename = "specifyMaterialData", skip_serializing_if = "Option::is_none")]
    pub specify_material_data: Option<bool>,
    #[serde(rename = "specifyUnits", skip_serializing_if = "Option::is_none")]
    pub specify_units: Option<bool>,
    #[serde(rename = "splinesAsPolylines", skip_serializing_if = "Option::is_none")]
    pub splines_as_polylines: Option<bool>,
    #[serde(rename = "splitAssembliesIntoMultipleDocuments", skip_serializing_if = "Option::is_none")]
    pub split_assemblies_into_multiple_documents: Option<bool>,
    #[serde(rename = "stepParasolidPreprocessingOption", skip_serializing_if = "Option::is_none")]
    pub step_parasolid_preprocessing_option: Option<models::GbtPreProcessParasolidOption>,
    #[serde(rename = "stepVersionString", skip_serializing_if = "Option::is_none")]
    pub step_version_string: Option<String>,
    #[serde(rename = "stlMode", skip_serializing_if = "Option::is_none")]
    pub stl_mode: Option<models::GbtStlEncodingType>,
    #[serde(rename = "storeInDocument", skip_serializing_if = "Option::is_none")]
    pub store_in_document: Option<bool>,
    #[serde(rename = "textAsGeometry", skip_serializing_if = "Option::is_none")]
    pub text_as_geometry: Option<bool>,
    #[serde(rename = "textOption", skip_serializing_if = "Option::is_none")]
    pub text_option: Option<String>,
    #[serde(rename = "triggerAutoDownload", skip_serializing_if = "Option::is_none")]
    pub trigger_auto_download: Option<bool>,
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(rename = "uploadId", skip_serializing_if = "Option::is_none")]
    pub upload_id: Option<String>,
    #[serde(rename = "useFileNameToSetSinglePartName", skip_serializing_if = "Option::is_none")]
    pub use_file_name_to_set_single_part_name: Option<bool>,
    #[serde(rename = "useGltfCompression", skip_serializing_if = "Option::is_none")]
    pub use_gltf_compression: Option<bool>,
    #[serde(rename = "useIGESImportPostProcessing", skip_serializing_if = "Option::is_none")]
    pub use_iges_import_post_processing: Option<bool>,
    #[serde(rename = "useIgesCompatibilityMode", skip_serializing_if = "Option::is_none")]
    pub use_iges_compatibility_mode: Option<bool>,
    #[serde(rename = "validForDays", skip_serializing_if = "Option::is_none")]
    pub valid_for_days: Option<i32>,
    #[serde(rename = "versionString", skip_serializing_if = "Option::is_none")]
    pub version_string: Option<String>,
}

impl BtTranslateFormatParams {
    pub fn new(format_name: String) -> BtTranslateFormatParams {
        BtTranslateFormatParams {
            allow_faulty_parts: None,
            angular_tolerance: None,
            blob_element_id: None,
            blob_microversion_id: None,
            cloud_object_id: None,
            cloud_storage_account_id: None,
            color_method: None,
            configuration: None,
            connection_id: None,
            create_composite: None,
            current_sheet_only: None,
            destination_name: None,
            distance_tolerance: None,
            element_id: None,
            element_ids: None,
            email_link: None,
            email_message: None,
            email_subject: None,
            email_to: None,
            evaluate_export_rule: None,
            exclude_hidden_entities: None,
            exclude_off_sheet_content: None,
            extract_assembly_hierarchy: None,
            flatten: None,
            flatten_assemblies: None,
            foreign_id: None,
            format_name,
            from_user_id: None,
            gety_axis_is_up: None,
            grouping: None,
            hide_inspection_items: None,
            ignore_export_rules_for_contents: None,
            image_height: None,
            image_width: None,
            import_appearances: None,
            import_in_background: None,
            import_material_density: None,
            import_within_document: None,
            include_export_ids: None,
            join_adjacent_surfaces: None,
            level: None,
            link_document_id: None,
            link_document_workspace_id: None,
            maximum_chord_length: None,
            notify_user: None,
            occurrences_to_export: None,
            one_part_per_doc: None,
            original_foreign_id: None,
            parent_id: None,
            part_ids: None,
            parts_export_filter: None,
            password: None,
            password_required: None,
            pdf_version: None,
            processed_foreign_id: None,
            project_id: None,
            proxy_document_id: None,
            proxy_element_id: None,
            proxy_workspace_version: None,
            proxy_workspace_version_id: None,
            resolution: None,
            rhino_version: None,
            selectable_pdf_text: None,
            send_copy_to_me: None,
            sheet_indices: None,
            show_overridden_dimensions: None,
            skip_bodyshop: None,
            source_name: None,
            specify_material_data: None,
            specify_units: None,
            splines_as_polylines: None,
            split_assemblies_into_multiple_documents: None,
            step_parasolid_preprocessing_option: None,
            step_version_string: None,
            stl_mode: None,
            store_in_document: None,
            text_as_geometry: None,
            text_option: None,
            trigger_auto_download: None,
            unit: None,
            upload_id: None,
            use_file_name_to_set_single_part_name: None,
            use_gltf_compression: None,
            use_iges_import_post_processing: None,
            use_iges_compatibility_mode: None,
            valid_for_days: None,
            version_string: None,
        }
    }
}
/// Determines export resolution of fine, medium, or coarse
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Resolution {
    #[serde(rename = "fine")]
    Fine,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "coarse")]
    Coarse,
}

impl Default for Resolution {
    fn default() -> Resolution {
        Self::Fine
    }
}


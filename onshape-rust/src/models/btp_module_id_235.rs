/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtpModuleId235 {
    /// Type of JSON object.
    #[serde(rename = "btType", skip_serializing_if = "Option::is_none")]
    pub bt_type: Option<String>,
    #[serde(rename = "atomic", skip_serializing_if = "Option::is_none")]
    pub atomic: Option<bool>,
    #[serde(rename = "documentationType", skip_serializing_if = "Option::is_none")]
    pub documentation_type: Option<models::GbtpDefinitionType>,
    #[serde(rename = "endSourceLocation", skip_serializing_if = "Option::is_none")]
    pub end_source_location: Option<i32>,
    #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "shortDescriptor", skip_serializing_if = "Option::is_none")]
    pub short_descriptor: Option<String>,
    #[serde(rename = "spaceAfter", skip_serializing_if = "Option::is_none")]
    pub space_after: Option<Box<models::BtpSpace10>>,
    #[serde(rename = "spaceBefore", skip_serializing_if = "Option::is_none")]
    pub space_before: Option<Box<models::BtpSpace10>>,
    #[serde(rename = "spaceDefault", skip_serializing_if = "Option::is_none")]
    pub space_default: Option<bool>,
    #[serde(rename = "startSourceLocation", skip_serializing_if = "Option::is_none")]
    pub start_source_location: Option<i32>,
    #[serde(rename = "dbimportString", skip_serializing_if = "Option::is_none")]
    pub dbimport_string: Option<String>,
    #[serde(rename = "elementImport", skip_serializing_if = "Option::is_none")]
    pub element_import: Option<bool>,
    #[serde(rename = "externalDocumentWithVersion", skip_serializing_if = "Option::is_none")]
    pub external_document_with_version: Option<Box<models::BtDocumentWithVersionId>>,
    #[serde(rename = "externalDocumentWithVersionAndElementId", skip_serializing_if = "Option::is_none")]
    pub external_document_with_version_and_element_id: Option<Box<models::BtDocumentWithVersionAndElementId>>,
    #[serde(rename = "externalImport", skip_serializing_if = "Option::is_none")]
    pub external_import: Option<bool>,
    #[serde(rename = "importedDocumentId", skip_serializing_if = "Option::is_none")]
    pub imported_document_id: Option<String>,
    #[serde(rename = "importedElementId", skip_serializing_if = "Option::is_none")]
    pub imported_element_id: Option<String>,
    #[serde(rename = "importedVersionId", skip_serializing_if = "Option::is_none")]
    pub imported_version_id: Option<String>,
    #[serde(rename = "legacy", skip_serializing_if = "Option::is_none")]
    pub legacy: Option<bool>,
    #[serde(rename = "legacyElementName", skip_serializing_if = "Option::is_none")]
    pub legacy_element_name: Option<String>,
    #[serde(rename = "legacyVersionNumber", skip_serializing_if = "Option::is_none")]
    pub legacy_version_number: Option<i32>,
    #[serde(rename = "microversion", skip_serializing_if = "Option::is_none")]
    pub microversion: Option<String>,
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<Box<models::BtpLiteralString259>>,
    #[serde(rename = "pathPotentiallyValid", skip_serializing_if = "Option::is_none")]
    pub path_potentially_valid: Option<bool>,
    #[serde(rename = "pathVersion", skip_serializing_if = "Option::is_none")]
    pub path_version: Option<String>,
    #[serde(rename = "potentiallyValid", skip_serializing_if = "Option::is_none")]
    pub potentially_valid: Option<bool>,
    #[serde(rename = "spaceAfterPath", skip_serializing_if = "Option::is_none")]
    pub space_after_path: Option<Box<models::BtpSpace10>>,
    #[serde(rename = "spaceAfterVersion", skip_serializing_if = "Option::is_none")]
    pub space_after_version: Option<Box<models::BtpSpace10>>,
    #[serde(rename = "spaceBeforePath", skip_serializing_if = "Option::is_none")]
    pub space_before_path: Option<Box<models::BtpSpace10>>,
    #[serde(rename = "spaceBeforeVersion", skip_serializing_if = "Option::is_none")]
    pub space_before_version: Option<Box<models::BtpSpace10>>,
    #[serde(rename = "standardLibrary", skip_serializing_if = "Option::is_none")]
    pub standard_library: Option<bool>,
    #[serde(rename = "standardLibraryCommon", skip_serializing_if = "Option::is_none")]
    pub standard_library_common: Option<bool>,
    #[serde(rename = "validLegacyVersion", skip_serializing_if = "Option::is_none")]
    pub valid_legacy_version: Option<bool>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<Box<models::BtpLiteralString259>>,
    #[serde(rename = "versionAndMicroversion", skip_serializing_if = "Option::is_none")]
    pub version_and_microversion: Option<String>,
    #[serde(rename = "versionPotentiallyValid", skip_serializing_if = "Option::is_none")]
    pub version_potentially_valid: Option<bool>,
}

impl BtpModuleId235 {
    pub fn new() -> BtpModuleId235 {
        BtpModuleId235 {
            bt_type: None,
            atomic: None,
            documentation_type: None,
            end_source_location: None,
            node_id: None,
            short_descriptor: None,
            space_after: None,
            space_before: None,
            space_default: None,
            start_source_location: None,
            dbimport_string: None,
            element_import: None,
            external_document_with_version: None,
            external_document_with_version_and_element_id: None,
            external_import: None,
            imported_document_id: None,
            imported_element_id: None,
            imported_version_id: None,
            legacy: None,
            legacy_element_name: None,
            legacy_version_number: None,
            microversion: None,
            path: None,
            path_potentially_valid: None,
            path_version: None,
            potentially_valid: None,
            space_after_path: None,
            space_after_version: None,
            space_before_path: None,
            space_before_version: None,
            standard_library: None,
            standard_library_common: None,
            valid_legacy_version: None,
            version: None,
            version_and_microversion: None,
            version_potentially_valid: None,
        }
    }
}


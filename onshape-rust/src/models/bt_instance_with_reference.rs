/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtInstanceWithReference {
    #[serde(rename = "configuration", skip_serializing_if = "Option::is_none")]
    pub configuration: Option<Vec<models::BtmParameter1>>,
    #[serde(rename = "customData", skip_serializing_if = "Option::is_none")]
    pub custom_data: Option<std::collections::HashMap<String, models::BtReferenceCustomData1551>>,
    #[serde(rename = "documentId", skip_serializing_if = "Option::is_none")]
    pub document_id: Option<String>,
    #[serde(rename = "elementId", skip_serializing_if = "Option::is_none")]
    pub element_id: Option<String>,
    #[serde(rename = "elementReference", skip_serializing_if = "Option::is_none")]
    pub element_reference: Option<Box<models::BtElementReference725>>,
    #[serde(rename = "externalDocumentWithVersion", skip_serializing_if = "Option::is_none")]
    pub external_document_with_version: Option<Box<models::BtDocumentWithVersionId>>,
    #[serde(rename = "externalDocumentWithVersionAndElementId", skip_serializing_if = "Option::is_none")]
    pub external_document_with_version_and_element_id: Option<Box<models::BtDocumentWithVersionAndElementId>>,
    #[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    #[serde(rename = "lockedState", skip_serializing_if = "Option::is_none")]
    pub locked_state: Option<Box<models::BtInstanceWithReference>>,
    #[serde(rename = "microversionId", skip_serializing_if = "Option::is_none")]
    pub microversion_id: Option<Box<models::BtMicroversionId366>>,
    #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "nodeWithReferenceList", skip_serializing_if = "Option::is_none")]
    pub node_with_reference_list: Option<Vec<models::BtNodeWithReference>>,
    #[serde(rename = "referenceParameter", skip_serializing_if = "Option::is_none")]
    pub reference_parameter: Option<Box<models::BtmParameterReferenceWithConfiguration3028>>,
    #[serde(rename = "standardContent", skip_serializing_if = "Option::is_none")]
    pub standard_content: Option<bool>,
    #[serde(rename = "standardContentParametersId", skip_serializing_if = "Option::is_none")]
    pub standard_content_parameters_id: Option<String>,
    #[serde(rename = "validRevisionReference", skip_serializing_if = "Option::is_none")]
    pub valid_revision_reference: Option<bool>,
    #[serde(rename = "versionId", skip_serializing_if = "Option::is_none")]
    pub version_id: Option<String>,
    #[serde(rename = "versionIdIfExternal", skip_serializing_if = "Option::is_none")]
    pub version_id_if_external: Option<String>,
}

impl BtInstanceWithReference {
    pub fn new() -> BtInstanceWithReference {
        BtInstanceWithReference {
            configuration: None,
            custom_data: None,
            document_id: None,
            element_id: None,
            element_reference: None,
            external_document_with_version: None,
            external_document_with_version_and_element_id: None,
            locked: None,
            locked_state: None,
            microversion_id: None,
            node_id: None,
            node_with_reference_list: None,
            reference_parameter: None,
            standard_content: None,
            standard_content_parameters_id: None,
            valid_revision_reference: None,
            version_id: None,
            version_id_if_external: None,
        }
    }
}


/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "btType")]
pub enum BtParameterSpec6 {
    #[serde(rename="BTParameterSpecAppearance-1740")]
    BtParameterSpecAppearance1740 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecArray-2600")]
    BtParameterSpecArray2600 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecBoolean-170")]
    BtParameterSpecBoolean170 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecButton-4111")]
    BtParameterSpecButton4111 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecDatabase-1071")]
    BtParameterSpecDatabase1071 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecDerived-736")]
    BtParameterSpecDerived736 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecEnum-171")]
    BtParameterSpecEnum171 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecFeatureList-703")]
    BtParameterSpecFeatureList703 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecForeignId-172")]
    BtParameterSpecForeignId172 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecLookupTablePath-761")]
    BtParameterSpecLookupTablePath761 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecMaterial-2700")]
    BtParameterSpecMaterial2700 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecMultiEnum-3118")]
    BtParameterSpecMultiEnum3118 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecNullableQuantity-715")]
    BtParameterSpecNullableQuantity715 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecQuantity-173")]
    BtParameterSpecQuantity173 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecQuery-174")]
    BtParameterSpecQuery174 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecReference-2789")]
    BtParameterSpecReference2789 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTParameterSpecString-175")]
    BtParameterSpecString175 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTReadOnlyParameterSpec-1889")]
    BtReadOnlyParameterSpec1889 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "columnName", skip_serializing_if = "Option::is_none")]
        column_name: Option<String>,
        #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
        default_value: Option<Box<models::BtmParameter1>>,
        #[serde(rename = "enumOptions", skip_serializing_if = "Option::is_none")]
        enum_options: Option<Vec<String>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "parameterDescription", skip_serializing_if = "Option::is_none")]
        parameter_description: Option<String>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "quantityType", skip_serializing_if = "Option::is_none")]
        quantity_type: Option<models::GbtQuantityType>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "uiHint", skip_serializing_if = "Option::is_none")]
        ui_hint: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
}

impl Default for BtParameterSpec6 {
    fn default() -> Self {
        Self::BtParameterSpecAppearance1740 {
            additional_localized_strings: Default::default(),
            column_name: Default::default(),
            default_value: Default::default(),
            enum_options: Default::default(),
            icon_uri: Default::default(),
            localizable_name: Default::default(),
            localized_name: Default::default(),
            parameter_description: Default::default(),
            parameter_id: Default::default(),
            parameter_name: Default::default(),
            quantity_type: Default::default(),
            strings_to_localize: Default::default(),
            ui_hint: Default::default(),
            ui_hints: Default::default(),
            visibility_condition: Default::default(),
        }
        
    }
}



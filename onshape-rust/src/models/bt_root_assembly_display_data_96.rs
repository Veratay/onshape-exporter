/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtRootAssemblyDisplayData96 {
    #[serde(rename = "annotationsForElement", skip_serializing_if = "Option::is_none")]
    pub annotations_for_element: Option<Box<models::BtAnnotationElementDisplayData894>>,
    #[serde(rename = "assemblyFeatures", skip_serializing_if = "Option::is_none")]
    pub assembly_features: Option<Vec<models::BtAssemblyFeatureDisplayData1783>>,
    /// Type of JSON object.
    #[serde(rename = "btType", skip_serializing_if = "Option::is_none")]
    pub bt_type: Option<String>,
    #[serde(rename = "buildDurationMillis", skip_serializing_if = "Option::is_none")]
    pub build_duration_millis: Option<f64>,
    #[serde(rename = "deletedAssemblyFeatures", skip_serializing_if = "Option::is_none")]
    pub deleted_assembly_features: Option<Vec<String>>,
    #[serde(rename = "deletedGeometryMateIds", skip_serializing_if = "Option::is_none")]
    pub deleted_geometry_mate_ids: Option<Vec<String>>,
    #[serde(rename = "deletedLoads", skip_serializing_if = "Option::is_none")]
    pub deleted_loads: Option<Vec<String>>,
    #[serde(rename = "deletedMateConnectorIds", skip_serializing_if = "Option::is_none")]
    pub deleted_mate_connector_ids: Option<Vec<String>>,
    #[serde(rename = "deletedMateGroupIds", skip_serializing_if = "Option::is_none")]
    pub deleted_mate_group_ids: Option<Vec<String>>,
    #[serde(rename = "deletedMateIds", skip_serializing_if = "Option::is_none")]
    pub deleted_mate_ids: Option<Vec<String>>,
    #[serde(rename = "deletedOccurrences", skip_serializing_if = "Option::is_none")]
    pub deleted_occurrences: Option<Vec<models::BtOccurrence74>>,
    #[serde(rename = "elementId", skip_serializing_if = "Option::is_none")]
    pub element_id: Option<String>,
    #[serde(rename = "fromFullElementId", skip_serializing_if = "Option::is_none")]
    pub from_full_element_id: Option<Box<models::BtFullElementId756>>,
    #[serde(rename = "fullElementId", skip_serializing_if = "Option::is_none")]
    pub full_element_id: Option<Box<models::BtFullElementId756>>,
    #[serde(rename = "fullElementIdToReferencedSketchIds", skip_serializing_if = "Option::is_none")]
    pub full_element_id_to_referenced_sketch_ids: Option<std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "geometryMates", skip_serializing_if = "Option::is_none")]
    pub geometry_mates: Option<Vec<models::BtGeometryMateDisplayData1050>>,
    #[serde(rename = "incremental", skip_serializing_if = "Option::is_none")]
    pub incremental: Option<bool>,
    #[serde(rename = "instanceCount", skip_serializing_if = "Option::is_none")]
    pub instance_count: Option<i32>,
    #[serde(rename = "isCollapsible", skip_serializing_if = "Option::is_none")]
    pub is_collapsible: Option<bool>,
    #[serde(rename = "isForInContext", skip_serializing_if = "Option::is_none")]
    pub is_for_in_context: Option<bool>,
    #[serde(rename = "keepFromMicroversion", skip_serializing_if = "Option::is_none")]
    pub keep_from_microversion: Option<bool>,
    #[serde(rename = "loads", skip_serializing_if = "Option::is_none")]
    pub loads: Option<Vec<models::BtLoadDisplayData837>>,
    #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
    pub mate_connectors: Option<Vec<models::BtMateConnectorDisplayData94>>,
    #[serde(rename = "mateGroups", skip_serializing_if = "Option::is_none")]
    pub mate_groups: Option<Vec<models::BtMateGroupDisplayData1990>>,
    #[serde(rename = "mates", skip_serializing_if = "Option::is_none")]
    pub mates: Option<Vec<models::BtMateDisplayData1358>>,
    #[serde(rename = "microversionId", skip_serializing_if = "Option::is_none")]
    pub microversion_id: Option<Box<models::BtMicroversionId366>>,
    #[serde(rename = "microversionIdAndConfigurationInterval", skip_serializing_if = "Option::is_none")]
    pub microversion_id_and_configuration_interval: Option<Box<models::BtMicroversionIdAndConfigurationInterval2364>>,
    #[serde(rename = "microversionInterval", skip_serializing_if = "Option::is_none")]
    pub microversion_interval: Option<Box<models::BtMicroversionIdInterval367>>,
    #[serde(rename = "occurrences", skip_serializing_if = "Option::is_none")]
    pub occurrences: Option<Vec<models::BtOccurrenceDisplayData95>>,
    #[serde(rename = "originDisplayData", skip_serializing_if = "Option::is_none")]
    pub origin_display_data: Option<Box<models::BtOriginDisplayData934>>,
    #[serde(rename = "partStudioDisplayData", skip_serializing_if = "Option::is_none")]
    pub part_studio_display_data: Option<Vec<models::BtPartStudioDisplayDataBase2751>>,
    #[serde(rename = "quickSummary", skip_serializing_if = "Option::is_none")]
    pub quick_summary: Option<String>,
    #[serde(rename = "sentTimeISO", skip_serializing_if = "Option::is_none")]
    pub sent_time_iso: Option<String>,
    #[serde(rename = "versionForRasterization", skip_serializing_if = "Option::is_none")]
    pub version_for_rasterization: Option<Box<models::BtElementDisplayData326>>,
}

impl BtRootAssemblyDisplayData96 {
    pub fn new() -> BtRootAssemblyDisplayData96 {
        BtRootAssemblyDisplayData96 {
            annotations_for_element: None,
            assembly_features: None,
            bt_type: None,
            build_duration_millis: None,
            deleted_assembly_features: None,
            deleted_geometry_mate_ids: None,
            deleted_loads: None,
            deleted_mate_connector_ids: None,
            deleted_mate_group_ids: None,
            deleted_mate_ids: None,
            deleted_occurrences: None,
            element_id: None,
            from_full_element_id: None,
            full_element_id: None,
            full_element_id_to_referenced_sketch_ids: None,
            geometry_mates: None,
            incremental: None,
            instance_count: None,
            is_collapsible: None,
            is_for_in_context: None,
            keep_from_microversion: None,
            loads: None,
            mate_connectors: None,
            mate_groups: None,
            mates: None,
            microversion_id: None,
            microversion_id_and_configuration_interval: None,
            microversion_interval: None,
            occurrences: None,
            origin_display_data: None,
            part_studio_display_data: None,
            quick_summary: None,
            sent_time_iso: None,
            version_for_rasterization: None,
        }
    }
}


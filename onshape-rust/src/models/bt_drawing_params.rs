/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// BtDrawingParams : JSON schema for creating or updating a drawing.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtDrawingParams {
    /// Set to `true` to include a border in the drawing.
    #[serde(rename = "border", skip_serializing_if = "Option::is_none")]
    pub border: Option<bool>,
    /// Set to `true` to compute and display virtual edges (curves drawn where parts intersect). Leave as `false` to improve performance.
    #[serde(rename = "computeIntersection", skip_serializing_if = "Option::is_none")]
    pub compute_intersection: Option<bool>,
    /// `PERIOD` | `COMMA`
    #[serde(rename = "decimalSeparator", skip_serializing_if = "Option::is_none")]
    pub decimal_separator: Option<String>,
    /// Apply this display state's properties to the drawing.
    #[serde(rename = "displayStateId", skip_serializing_if = "Option::is_none")]
    pub display_state_id: Option<String>,
    /// The document in which to create the drawing. If used, this value must match the document ID (`did`) value provided in the URL.
    #[serde(rename = "documentId", skip_serializing_if = "Option::is_none")]
    pub document_id: Option<String>,
    /// Create a drawing of a part or assembly from this microversion.
    #[serde(rename = "documentMicroversionId", skip_serializing_if = "Option::is_none")]
    pub document_microversion_id: Option<String>,
    /// Provide a name for the drawing.
    #[serde(rename = "drawingName", skip_serializing_if = "Option::is_none")]
    pub drawing_name: Option<String>,
    /// Apply this configuration from the source element to the drawing.
    #[serde(rename = "elementConfiguration", skip_serializing_if = "Option::is_none")]
    pub element_configuration: Option<String>,
    /// The id of the element in which to perform the operation.
    #[serde(rename = "elementId", skip_serializing_if = "Option::is_none")]
    pub element_id: Option<String>,
    /// The id of the element microversion in which to perform the operation.
    #[serde(rename = "elementMicroversionId", skip_serializing_if = "Option::is_none")]
    pub element_microversion_id: Option<String>,
    /// Apply this exploded view to the drawing.
    #[serde(rename = "explosionId", skip_serializing_if = "Option::is_none")]
    pub explosion_id: Option<String>,
    /// Create a drawing of an element from this external document.
    #[serde(rename = "externalDocumentId", skip_serializing_if = "Option::is_none")]
    pub external_document_id: Option<String>,
    /// Create a drawing of an element from this external document version.
    #[serde(rename = "externalDocumentVersionId", skip_serializing_if = "Option::is_none")]
    pub external_document_version_id: Option<String>,
    #[serde(rename = "hiddenLines", skip_serializing_if = "Option::is_none")]
    pub hidden_lines: Option<models::BtDrawingHiddenLineOption>,
    /// Set to `true` to include surfaces in the drawing.
    #[serde(rename = "includeSurfaces", skip_serializing_if = "Option::is_none")]
    pub include_surfaces: Option<bool>,
    /// Set to `true` to include wires in the drawing.
    #[serde(rename = "includeWires", skip_serializing_if = "Option::is_none")]
    pub include_wires: Option<bool>,
    /// Set to `true` if creating a drawing from a flattened part.
    #[serde(rename = "isFlattenedPart", skip_serializing_if = "Option::is_none")]
    pub is_flattened_part: Option<bool>,
    /// Set to `true` if creating a drawing of a sketch.
    #[serde(rename = "isSketchOnly", skip_serializing_if = "Option::is_none")]
    pub is_sketch_only: Option<bool>,
    /// Set to `true` if creating a drawing from a surface.
    #[serde(rename = "isSurface", skip_serializing_if = "Option::is_none")]
    pub is_surface: Option<bool>,
    /// Set the language for the drawing. Accepts any ISO 639-1 standard language code.
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<models::BtElementLocationParams>>,
    /// The type of model to include in the drawing: `partstudio` | `assembly`
    #[serde(rename = "modelType", skip_serializing_if = "Option::is_none")]
    pub model_type: Option<String>,
    /// Apply this named view to the drawing.
    #[serde(rename = "namedPositionId", skip_serializing_if = "Option::is_none")]
    pub named_position_id: Option<String>,
    /// The number of horizontal zones to include in the drawing's graphics area.
    #[serde(rename = "numberHorizontalZones", skip_serializing_if = "Option::is_none")]
    pub number_horizontal_zones: Option<i32>,
    /// The number of vertical zones to include in the drawing's graphics area.
    #[serde(rename = "numberVerticalZones", skip_serializing_if = "Option::is_none")]
    pub number_vertical_zones: Option<i32>,
    /// Include this part in the drawing.
    #[serde(rename = "partId", skip_serializing_if = "Option::is_none")]
    pub part_id: Option<String>,
    /// Include this part in the drawing.
    #[serde(rename = "partNumber", skip_serializing_if = "Option::is_none")]
    pub part_number: Option<String>,
    /// Include all parts found by the query in the drawing.
    #[serde(rename = "partQuery", skip_serializing_if = "Option::is_none")]
    pub part_query: Option<String>,
    /// Apply this projection to the drawing.
    #[serde(rename = "projection", skip_serializing_if = "Option::is_none")]
    pub projection: Option<String>,
    /// Set to `true` if creating the drawing of an empty sketch.
    #[serde(rename = "pureSketch", skip_serializing_if = "Option::is_none")]
    pub pure_sketch: Option<bool>,
    /// `BEST_PERFORMANCE` | `BEST_QUALITY` | `BALANCED` | `ADAPTIVE`
    #[serde(rename = "qualityOption", skip_serializing_if = "Option::is_none")]
    pub quality_option: Option<String>,
    /// Specify the type of element to create the drawing from. `0: UNKNOWN` | `1: PARTSTUDIO` | `2: ASSEMBLY` | `3: PART` | `4: FLATTENED_PART` | `5: COMPOSITE_PART` | `6: MESH_PART` | `7: SURFACE` | `8: SKETCH` | `9: CURVE`
    #[serde(rename = "referenceType", skip_serializing_if = "Option::is_none")]
    pub reference_type: Option<i32>,
    #[serde(rename = "referenceTypeEnum", skip_serializing_if = "Option::is_none")]
    pub reference_type_enum: Option<models::GbtAppElementReferenceType>,
    /// Create the drawing from this specific revision.
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    /// Set to `true` to show only cut geometry in the drawing.
    #[serde(rename = "showCutGeomOnly", skip_serializing_if = "Option::is_none")]
    pub show_cut_geom_only: Option<bool>,
    /// `NONE` | `ABSOLUTE` | `RATIO_TO_MODEL` | `RATIO_TO_BODY` | `AUTOMATIC`
    #[serde(rename = "simplificationOption", skip_serializing_if = "Option::is_none")]
    pub simplification_option: Option<String>,
    /// `NONE` | `UNKNOWN` | `SMOOTH` | `DRAFTING`
    #[serde(rename = "simplificationThreshold", skip_serializing_if = "Option::is_none")]
    pub simplification_threshold: Option<f64>,
    /// Provide a size for the drawing.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    /// Include these sketches in the drawing.
    #[serde(rename = "sketchIds", skip_serializing_if = "Option::is_none")]
    pub sketch_ids: Option<Vec<String>>,
    /// Provide the Standard to use in the drawing.
    #[serde(rename = "standard", skip_serializing_if = "Option::is_none")]
    pub standard: Option<String>,
    /// The zone in which to start the drawing.
    #[serde(rename = "startZones", skip_serializing_if = "Option::is_none")]
    pub start_zones: Option<String>,
    /// Provide any additional arguments for the template being used for this drawing.
    #[serde(rename = "templateArgs", skip_serializing_if = "Option::is_none")]
    pub template_args: Option<Vec<String>>,
    /// Apply the template from this document to the drawing.
    #[serde(rename = "templateDocumentId", skip_serializing_if = "Option::is_none")]
    pub template_document_id: Option<String>,
    /// Apply the template from this element to the drawing.
    #[serde(rename = "templateElementId", skip_serializing_if = "Option::is_none")]
    pub template_element_id: Option<String>,
    /// Apply this template to the drawing.
    #[serde(rename = "templateName", skip_serializing_if = "Option::is_none")]
    pub template_name: Option<String>,
    /// Apply the template from this version to the drawing.
    #[serde(rename = "templateVersionId", skip_serializing_if = "Option::is_none")]
    pub template_version_id: Option<String>,
    /// Apply the template from this workspace to the drawing.
    #[serde(rename = "templateWorkspaceId", skip_serializing_if = "Option::is_none")]
    pub template_workspace_id: Option<String>,
    /// Set to `true` to include a title block in the drawing.
    #[serde(rename = "titleblock", skip_serializing_if = "Option::is_none")]
    pub titleblock: Option<bool>,
    /// Units for the element: `METER` | `CENTIMETER` | `MILLIMETER` | `INCH` | `FOOT` | `YARD`
    #[serde(rename = "units", skip_serializing_if = "Option::is_none")]
    pub units: Option<String>,
    /// Add these views to the drawing.
    #[serde(rename = "views", skip_serializing_if = "Option::is_none")]
    pub views: Option<String>,
    /// Create a drawing of a part or assembly from this workspace.
    #[serde(rename = "workspaceId", skip_serializing_if = "Option::is_none")]
    pub workspace_id: Option<String>,
}

impl BtDrawingParams {
    /// JSON schema for creating or updating a drawing.
    pub fn new() -> BtDrawingParams {
        BtDrawingParams {
            border: None,
            compute_intersection: None,
            decimal_separator: None,
            display_state_id: None,
            document_id: None,
            document_microversion_id: None,
            drawing_name: None,
            element_configuration: None,
            element_id: None,
            element_microversion_id: None,
            explosion_id: None,
            external_document_id: None,
            external_document_version_id: None,
            hidden_lines: None,
            include_surfaces: None,
            include_wires: None,
            is_flattened_part: None,
            is_sketch_only: None,
            is_surface: None,
            language: None,
            location: None,
            model_type: None,
            named_position_id: None,
            number_horizontal_zones: None,
            number_vertical_zones: None,
            part_id: None,
            part_number: None,
            part_query: None,
            projection: None,
            pure_sketch: None,
            quality_option: None,
            reference_type: None,
            reference_type_enum: None,
            revision: None,
            show_cut_geom_only: None,
            simplification_option: None,
            simplification_threshold: None,
            size: None,
            sketch_ids: None,
            standard: None,
            start_zones: None,
            template_args: None,
            template_document_id: None,
            template_element_id: None,
            template_name: None,
            template_version_id: None,
            template_workspace_id: None,
            titleblock: None,
            units: None,
            views: None,
            workspace_id: None,
        }
    }
}


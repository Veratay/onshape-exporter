/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtDocumentSearchParams {
    /// Type of documents to search: `0: My Documents | 1: Created | 2: Shared | 3: Trash | 4: Public | 5: Recent | 6: By Owner | 7: By Company | 9: By Team`
    #[serde(rename = "documentFilter", skip_serializing_if = "Option::is_none")]
    pub document_filter: Option<i32>,
    #[serde(rename = "foundIn", skip_serializing_if = "Option::is_none")]
    pub found_in: Option<models::BtesVersionWorkspaceChoice>,
    /// Number of results to return per page. Default value is 20 (also the maximum).
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    /// Offset. Determines where search results begin. Default value is 0.
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    /// Owner ID. Can be a user ID, company ID, or team ID, depending on `ownerType`.
    #[serde(rename = "ownerId", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    /// Search document parent Id 
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    /// Search for documents that contain the given string in the name. Search is not case-sensitive.
    #[serde(rename = "rawQuery", skip_serializing_if = "Option::is_none")]
    pub raw_query: Option<String>,
    /// Column by which to sort search results. `name | modifiedAt | createdAt (default) | email | modifiedBy | promotedAt`
    #[serde(rename = "sortColumn", skip_serializing_if = "Option::is_none")]
    pub sort_column: Option<String>,
    /// Type of documents to search: `0: My Documents | 1: Created | 2: Shared | 3: Trash | 4: Public | 5: Recent | 6: By Owner | 7: By Company | 9: By Team`
    #[serde(rename = "sortOrder", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<String>,
    /// Type of owner. `0: User | 1: Company | 2: Onshape`. If the owner is a teamId, leave this unspecified.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "when", skip_serializing_if = "Option::is_none")]
    pub when: Option<models::BtesResultsFilter>,
}

impl BtDocumentSearchParams {
    pub fn new() -> BtDocumentSearchParams {
        BtDocumentSearchParams {
            document_filter: None,
            found_in: None,
            limit: None,
            offset: None,
            owner_id: None,
            parent_id: None,
            raw_query: None,
            sort_column: None,
            sort_order: None,
            r#type: None,
            when: None,
        }
    }
}


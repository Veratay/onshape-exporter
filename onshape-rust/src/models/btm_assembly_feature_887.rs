/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "btType")]
pub enum BtmAssemblyFeature887 {
    #[serde(rename="BTAssemblySimulation-2246")]
    BtAssemblySimulation2246 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTExplosion-2754")]
    BtExplosion2754 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTExplosionStepFeature-3008")]
    BtExplosionStepFeature3008 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMAssemblyFeature1-2218")]
    BtmAssemblyFeature12218 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMAssemblyFeature2-1022")]
    BtmAssemblyFeature21022 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMAssemblyFeatureFolder-2543")]
    BtmAssemblyFeatureFolder2543 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMAssemblyMirrorFeature-3037")]
    BtmAssemblyMirrorFeature3037 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMAssemblyPatternFeature-2241")]
    BtmAssemblyPatternFeature2241 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMAssemblyReplicateFeature-1351")]
    BtmAssemblyReplicateFeature1351 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMDerivedAssemblyMirrorFeature-5094")]
    BtmDerivedAssemblyMirrorFeature5094 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMGenerativeDesignFeature-3195")]
    BtmGenerativeDesignFeature3195 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMGeometryMate-1260")]
    BtmGeometryMate1260 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMLoad-3538")]
    BtmLoad3538 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMMate-64")]
    BtmMate64 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMMateConnector-66")]
    BtmMateConnector66 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMMateGroup-65")]
    BtmMateGroup65 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMMateRelation-1412")]
    BtmMateRelation1412 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMNonGeometricItem-1864")]
    BtmNonGeometricItem1864 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMParametricPartStudioFeature-3883")]
    BtmParametricPartStudioFeature3883 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
    #[serde(rename="BTMWidthMate-1011")]
    BtmWidthMate1011 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
        #[serde(rename = "auxiliaryTreeFeature", skip_serializing_if = "Option::is_none")]
        auxiliary_tree_feature: Option<bool>,
        #[serde(rename = "featureFolder", skip_serializing_if = "Option::is_none")]
        feature_folder: Option<bool>,
        #[serde(rename = "featureListFieldIndex", skip_serializing_if = "Option::is_none")]
        feature_list_field_index: Option<i32>,
        #[serde(rename = "fieldIndexForOwnedMateConnectors", skip_serializing_if = "Option::is_none")]
        field_index_for_owned_mate_connectors: Option<i32>,
        #[serde(rename = "mateConnectors", skip_serializing_if = "Option::is_none")]
        mate_connectors: Option<Vec<models::BtmMateConnector66>>,
        #[serde(rename = "occurrenceQueriesFromAllConfigurations", skip_serializing_if = "Option::is_none")]
        occurrence_queries_from_all_configurations: Option<Vec<models::BtmIndividualQueryWithOccurrenceBase904>>,
        #[serde(rename = "parametricInstanceFeature", skip_serializing_if = "Option::is_none")]
        parametric_instance_feature: Option<bool>,
        #[serde(rename = "subFeaturesNotUsedInQuery", skip_serializing_if = "Option::is_none")]
        sub_features_not_used_in_query: Option<Vec<models::BtmFeature134>>,
        #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
        version: Option<i32>,
    },
}

impl Default for BtmAssemblyFeature887 {
    fn default() -> Self {
        Self::BtAssemblySimulation2246 {
            feature_id: Default::default(),
            feature_type: Default::default(),
            import_microversion: Default::default(),
            mate_connector_feature: Default::default(),
            name: Default::default(),
            namespace: Default::default(),
            node_id: Default::default(),
            parameters: Default::default(),
            return_after_subfeatures: Default::default(),
            sub_features: Default::default(),
            suppressed: Default::default(),
            suppression_configured: Default::default(),
            variable_studio_reference: Default::default(),
            auxiliary_tree_feature: Default::default(),
            feature_folder: Default::default(),
            feature_list_field_index: Default::default(),
            field_index_for_owned_mate_connectors: Default::default(),
            mate_connectors: Default::default(),
            occurrence_queries_from_all_configurations: Default::default(),
            parametric_instance_feature: Default::default(),
            sub_features_not_used_in_query: Default::default(),
            version: Default::default(),
        }
        
    }
}



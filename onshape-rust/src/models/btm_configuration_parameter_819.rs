/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "btType")]
pub enum BtmConfigurationParameter819 {
    #[serde(rename="BTMConfigurationParameterBoolean-2550")]
    BtmConfigurationParameterBoolean2550 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "enumOptionIds", skip_serializing_if = "Option::is_none")]
        enum_option_ids: Option<Vec<String>>,
        #[serde(rename = "generatedParameterId", skip_serializing_if = "Option::is_none")]
        generated_parameter_id: Option<Box<models::BtTreeNode20>>,
        #[serde(rename = "isCosmetic", skip_serializing_if = "Option::is_none")]
        is_cosmetic: Option<bool>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "parameterType", skip_serializing_if = "Option::is_none")]
        parameter_type: Option<models::GbtConfigurationParameterType>,
        #[serde(rename = "valid", skip_serializing_if = "Option::is_none")]
        valid: Option<bool>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTMConfigurationParameterEnum-105")]
    BtmConfigurationParameterEnum105 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "enumOptionIds", skip_serializing_if = "Option::is_none")]
        enum_option_ids: Option<Vec<String>>,
        #[serde(rename = "generatedParameterId", skip_serializing_if = "Option::is_none")]
        generated_parameter_id: Option<Box<models::BtTreeNode20>>,
        #[serde(rename = "isCosmetic", skip_serializing_if = "Option::is_none")]
        is_cosmetic: Option<bool>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "parameterType", skip_serializing_if = "Option::is_none")]
        parameter_type: Option<models::GbtConfigurationParameterType>,
        #[serde(rename = "valid", skip_serializing_if = "Option::is_none")]
        valid: Option<bool>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTMConfigurationParameterQuantity-1826")]
    BtmConfigurationParameterQuantity1826 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "enumOptionIds", skip_serializing_if = "Option::is_none")]
        enum_option_ids: Option<Vec<String>>,
        #[serde(rename = "generatedParameterId", skip_serializing_if = "Option::is_none")]
        generated_parameter_id: Option<Box<models::BtTreeNode20>>,
        #[serde(rename = "isCosmetic", skip_serializing_if = "Option::is_none")]
        is_cosmetic: Option<bool>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "parameterType", skip_serializing_if = "Option::is_none")]
        parameter_type: Option<models::GbtConfigurationParameterType>,
        #[serde(rename = "valid", skip_serializing_if = "Option::is_none")]
        valid: Option<bool>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
    #[serde(rename="BTMConfigurationParameterString-872")]
    BtmConfigurationParameterString872 {
        /// Microversion that resulted from the import.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "enumOptionIds", skip_serializing_if = "Option::is_none")]
        enum_option_ids: Option<Vec<String>>,
        #[serde(rename = "generatedParameterId", skip_serializing_if = "Option::is_none")]
        generated_parameter_id: Option<Box<models::BtTreeNode20>>,
        #[serde(rename = "isCosmetic", skip_serializing_if = "Option::is_none")]
        is_cosmetic: Option<bool>,
        #[serde(rename = "parameterId", skip_serializing_if = "Option::is_none")]
        parameter_id: Option<String>,
        #[serde(rename = "parameterName", skip_serializing_if = "Option::is_none")]
        parameter_name: Option<String>,
        #[serde(rename = "parameterType", skip_serializing_if = "Option::is_none")]
        parameter_type: Option<models::GbtConfigurationParameterType>,
        #[serde(rename = "valid", skip_serializing_if = "Option::is_none")]
        valid: Option<bool>,
        #[serde(rename = "visibilityCondition", skip_serializing_if = "Option::is_none")]
        visibility_condition: Option<Box<models::BtParameterVisibilityCondition177>>,
    },
}

impl Default for BtmConfigurationParameter819 {
    fn default() -> Self {
        Self::BtmConfigurationParameterBoolean2550 {
            import_microversion: Default::default(),
            node_id: Default::default(),
            enum_option_ids: Default::default(),
            generated_parameter_id: Default::default(),
            is_cosmetic: Default::default(),
            parameter_id: Default::default(),
            parameter_name: Default::default(),
            parameter_type: Default::default(),
            valid: Default::default(),
            visibility_condition: Default::default(),
        }
        
    }
}



/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtWebClientCapabilitiesParams {
    #[serde(rename = "angleInstancedArrays", skip_serializing_if = "Option::is_none")]
    pub angle_instanced_arrays: Option<bool>,
    #[serde(rename = "clientBrowserStorageQuota", skip_serializing_if = "Option::is_none")]
    pub client_browser_storage_quota: Option<f64>,
    #[serde(rename = "clientBrowserStorageUsed", skip_serializing_if = "Option::is_none")]
    pub client_browser_storage_used: Option<f64>,
    #[serde(rename = "compressedTextureS3tc", skip_serializing_if = "Option::is_none")]
    pub compressed_texture_s3tc: Option<bool>,
    #[serde(rename = "depthTexture", skip_serializing_if = "Option::is_none")]
    pub depth_texture: Option<bool>,
    #[serde(rename = "devicePixelRatio", skip_serializing_if = "Option::is_none")]
    pub device_pixel_ratio: Option<f64>,
    #[serde(rename = "drawBuffers", skip_serializing_if = "Option::is_none")]
    pub draw_buffers: Option<bool>,
    #[serde(rename = "extTextureFilterAnisotropic", skip_serializing_if = "Option::is_none")]
    pub ext_texture_filter_anisotropic: Option<bool>,
    #[serde(rename = "has3dMouse", skip_serializing_if = "Option::is_none")]
    pub has3d_mouse: Option<bool>,
    #[serde(rename = "oesElementIndexUint", skip_serializing_if = "Option::is_none")]
    pub oes_element_index_uint: Option<bool>,
    #[serde(rename = "oesStandardDerivatives", skip_serializing_if = "Option::is_none")]
    pub oes_standard_derivatives: Option<bool>,
    #[serde(rename = "oesTextureFloat", skip_serializing_if = "Option::is_none")]
    pub oes_texture_float: Option<bool>,
    #[serde(rename = "oesTextureFloatLinear", skip_serializing_if = "Option::is_none")]
    pub oes_texture_float_linear: Option<bool>,
    #[serde(rename = "oesTextureHalfFloat", skip_serializing_if = "Option::is_none")]
    pub oes_texture_half_float: Option<bool>,
    #[serde(rename = "oesTextureHalfFloatLinear", skip_serializing_if = "Option::is_none")]
    pub oes_texture_half_float_linear: Option<bool>,
    #[serde(rename = "oesVertexArrayObject", skip_serializing_if = "Option::is_none")]
    pub oes_vertex_array_object: Option<bool>,
    #[serde(rename = "renderer", skip_serializing_if = "Option::is_none")]
    pub renderer: Option<String>,
    #[serde(rename = "screenHeight", skip_serializing_if = "Option::is_none")]
    pub screen_height: Option<i32>,
    #[serde(rename = "screenWidth", skip_serializing_if = "Option::is_none")]
    pub screen_width: Option<i32>,
    #[serde(rename = "supportsWebGL2", skip_serializing_if = "Option::is_none")]
    pub supports_web_gl2: Option<bool>,
    #[serde(rename = "supportsWebGPU", skip_serializing_if = "Option::is_none")]
    pub supports_web_gpu: Option<bool>,
    #[serde(rename = "vendor", skip_serializing_if = "Option::is_none")]
    pub vendor: Option<String>,
}

impl BtWebClientCapabilitiesParams {
    pub fn new() -> BtWebClientCapabilitiesParams {
        BtWebClientCapabilitiesParams {
            angle_instanced_arrays: None,
            client_browser_storage_quota: None,
            client_browser_storage_used: None,
            compressed_texture_s3tc: None,
            depth_texture: None,
            device_pixel_ratio: None,
            draw_buffers: None,
            ext_texture_filter_anisotropic: None,
            has3d_mouse: None,
            oes_element_index_uint: None,
            oes_standard_derivatives: None,
            oes_texture_float: None,
            oes_texture_float_linear: None,
            oes_texture_half_float: None,
            oes_texture_half_float_linear: None,
            oes_vertex_array_object: None,
            renderer: None,
            screen_height: None,
            screen_width: None,
            supports_web_gl2: None,
            supports_web_gpu: None,
            vendor: None,
        }
    }
}


/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "btType")]
pub enum BtpProcedureDeclarationBase266 {
    #[serde(rename="BTPConversionFunction-1362")]
    BtpConversionFunction1362 {
        #[serde(rename = "atomic", skip_serializing_if = "Option::is_none")]
        atomic: Option<bool>,
        #[serde(rename = "documentationType", skip_serializing_if = "Option::is_none")]
        documentation_type: Option<models::GbtpDefinitionType>,
        #[serde(rename = "endSourceLocation", skip_serializing_if = "Option::is_none")]
        end_source_location: Option<i32>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "shortDescriptor", skip_serializing_if = "Option::is_none")]
        short_descriptor: Option<String>,
        #[serde(rename = "spaceAfter", skip_serializing_if = "Option::is_none")]
        space_after: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "spaceBefore", skip_serializing_if = "Option::is_none")]
        space_before: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "spaceDefault", skip_serializing_if = "Option::is_none")]
        space_default: Option<bool>,
        #[serde(rename = "startSourceLocation", skip_serializing_if = "Option::is_none")]
        start_source_location: Option<i32>,
        #[serde(rename = "annotation", skip_serializing_if = "Option::is_none")]
        annotation: Option<Box<models::BtpAnnotation231>>,
        #[serde(rename = "argumentsToDocument", skip_serializing_if = "Option::is_none")]
        arguments_to_document: Option<Vec<models::BtpArgumentDeclaration232>>,
        #[serde(rename = "deprecated", skip_serializing_if = "Option::is_none")]
        deprecated: Option<bool>,
        #[serde(rename = "deprecatedExplanation", skip_serializing_if = "Option::is_none")]
        deprecated_explanation: Option<String>,
        #[serde(rename = "forExport", skip_serializing_if = "Option::is_none")]
        for_export: Option<bool>,
        #[serde(rename = "spaceAfterExport", skip_serializing_if = "Option::is_none")]
        space_after_export: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "symbolName", skip_serializing_if = "Option::is_none")]
        symbol_name: Option<Box<models::BtpIdentifier8>>,
        #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
        arguments: Option<Vec<models::BtpArgumentDeclaration232>>,
        #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
        body: Option<Box<models::BtpStatementBlock271>>,
        #[serde(rename = "precondition", skip_serializing_if = "Option::is_none")]
        precondition: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "returnType", skip_serializing_if = "Option::is_none")]
        return_type: Option<Box<models::BtpTypeName290>>,
        #[serde(rename = "spaceAfterArglist", skip_serializing_if = "Option::is_none")]
        space_after_arglist: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "spaceInEmptyList", skip_serializing_if = "Option::is_none")]
        space_in_empty_list: Option<Box<models::BtpSpace10>>,
    },
    #[serde(rename="BTPFunctionOrPredicateDeclaration-247")]
    BtpFunctionOrPredicateDeclaration247 {
        #[serde(rename = "atomic", skip_serializing_if = "Option::is_none")]
        atomic: Option<bool>,
        #[serde(rename = "documentationType", skip_serializing_if = "Option::is_none")]
        documentation_type: Option<models::GbtpDefinitionType>,
        #[serde(rename = "endSourceLocation", skip_serializing_if = "Option::is_none")]
        end_source_location: Option<i32>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "shortDescriptor", skip_serializing_if = "Option::is_none")]
        short_descriptor: Option<String>,
        #[serde(rename = "spaceAfter", skip_serializing_if = "Option::is_none")]
        space_after: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "spaceBefore", skip_serializing_if = "Option::is_none")]
        space_before: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "spaceDefault", skip_serializing_if = "Option::is_none")]
        space_default: Option<bool>,
        #[serde(rename = "startSourceLocation", skip_serializing_if = "Option::is_none")]
        start_source_location: Option<i32>,
        #[serde(rename = "annotation", skip_serializing_if = "Option::is_none")]
        annotation: Option<Box<models::BtpAnnotation231>>,
        #[serde(rename = "argumentsToDocument", skip_serializing_if = "Option::is_none")]
        arguments_to_document: Option<Vec<models::BtpArgumentDeclaration232>>,
        #[serde(rename = "deprecated", skip_serializing_if = "Option::is_none")]
        deprecated: Option<bool>,
        #[serde(rename = "deprecatedExplanation", skip_serializing_if = "Option::is_none")]
        deprecated_explanation: Option<String>,
        #[serde(rename = "forExport", skip_serializing_if = "Option::is_none")]
        for_export: Option<bool>,
        #[serde(rename = "spaceAfterExport", skip_serializing_if = "Option::is_none")]
        space_after_export: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "symbolName", skip_serializing_if = "Option::is_none")]
        symbol_name: Option<Box<models::BtpIdentifier8>>,
        #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
        arguments: Option<Vec<models::BtpArgumentDeclaration232>>,
        #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
        body: Option<Box<models::BtpStatementBlock271>>,
        #[serde(rename = "precondition", skip_serializing_if = "Option::is_none")]
        precondition: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "returnType", skip_serializing_if = "Option::is_none")]
        return_type: Option<Box<models::BtpTypeName290>>,
        #[serde(rename = "spaceAfterArglist", skip_serializing_if = "Option::is_none")]
        space_after_arglist: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "spaceInEmptyList", skip_serializing_if = "Option::is_none")]
        space_in_empty_list: Option<Box<models::BtpSpace10>>,
    },
    #[serde(rename="BTPOperatorDeclaration-264")]
    BtpOperatorDeclaration264 {
        #[serde(rename = "atomic", skip_serializing_if = "Option::is_none")]
        atomic: Option<bool>,
        #[serde(rename = "documentationType", skip_serializing_if = "Option::is_none")]
        documentation_type: Option<models::GbtpDefinitionType>,
        #[serde(rename = "endSourceLocation", skip_serializing_if = "Option::is_none")]
        end_source_location: Option<i32>,
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        #[serde(rename = "shortDescriptor", skip_serializing_if = "Option::is_none")]
        short_descriptor: Option<String>,
        #[serde(rename = "spaceAfter", skip_serializing_if = "Option::is_none")]
        space_after: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "spaceBefore", skip_serializing_if = "Option::is_none")]
        space_before: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "spaceDefault", skip_serializing_if = "Option::is_none")]
        space_default: Option<bool>,
        #[serde(rename = "startSourceLocation", skip_serializing_if = "Option::is_none")]
        start_source_location: Option<i32>,
        #[serde(rename = "annotation", skip_serializing_if = "Option::is_none")]
        annotation: Option<Box<models::BtpAnnotation231>>,
        #[serde(rename = "argumentsToDocument", skip_serializing_if = "Option::is_none")]
        arguments_to_document: Option<Vec<models::BtpArgumentDeclaration232>>,
        #[serde(rename = "deprecated", skip_serializing_if = "Option::is_none")]
        deprecated: Option<bool>,
        #[serde(rename = "deprecatedExplanation", skip_serializing_if = "Option::is_none")]
        deprecated_explanation: Option<String>,
        #[serde(rename = "forExport", skip_serializing_if = "Option::is_none")]
        for_export: Option<bool>,
        #[serde(rename = "spaceAfterExport", skip_serializing_if = "Option::is_none")]
        space_after_export: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "symbolName", skip_serializing_if = "Option::is_none")]
        symbol_name: Option<Box<models::BtpIdentifier8>>,
        #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
        arguments: Option<Vec<models::BtpArgumentDeclaration232>>,
        #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
        body: Option<Box<models::BtpStatementBlock271>>,
        #[serde(rename = "precondition", skip_serializing_if = "Option::is_none")]
        precondition: Option<Box<models::BtpStatement269>>,
        #[serde(rename = "returnType", skip_serializing_if = "Option::is_none")]
        return_type: Option<Box<models::BtpTypeName290>>,
        #[serde(rename = "spaceAfterArglist", skip_serializing_if = "Option::is_none")]
        space_after_arglist: Option<Box<models::BtpSpace10>>,
        #[serde(rename = "spaceInEmptyList", skip_serializing_if = "Option::is_none")]
        space_in_empty_list: Option<Box<models::BtpSpace10>>,
    },
}

impl Default for BtpProcedureDeclarationBase266 {
    fn default() -> Self {
        Self::BtpConversionFunction1362 {
            atomic: Default::default(),
            documentation_type: Default::default(),
            end_source_location: Default::default(),
            node_id: Default::default(),
            short_descriptor: Default::default(),
            space_after: Default::default(),
            space_before: Default::default(),
            space_default: Default::default(),
            start_source_location: Default::default(),
            annotation: Default::default(),
            arguments_to_document: Default::default(),
            deprecated: Default::default(),
            deprecated_explanation: Default::default(),
            for_export: Default::default(),
            space_after_export: Default::default(),
            symbol_name: Default::default(),
            arguments: Default::default(),
            body: Default::default(),
            precondition: Default::default(),
            return_type: Default::default(),
            space_after_arglist: Default::default(),
            space_in_empty_list: Default::default(),
        }
        
    }
}



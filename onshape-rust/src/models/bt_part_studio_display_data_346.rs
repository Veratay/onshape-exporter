/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtPartStudioDisplayData346 {
    #[serde(rename = "allInsertableDisplayData", skip_serializing_if = "Option::is_none")]
    pub all_insertable_display_data: Option<std::collections::HashMap<String, std::collections::HashMap<String, models::BtInsertableDisplayData2405>>>,
    #[serde(rename = "annotationsForElement", skip_serializing_if = "Option::is_none")]
    pub annotations_for_element: Option<Box<models::BtAnnotationElementDisplayData894>>,
    #[serde(rename = "appearanceIdToAppearanceOverride", skip_serializing_if = "Option::is_none")]
    pub appearance_id_to_appearance_override: Option<std::collections::HashMap<String, models::BtAppearanceOverride2517>>,
    #[serde(rename = "assemblyReferenceDisplayData", skip_serializing_if = "Option::is_none")]
    pub assembly_reference_display_data: Option<Box<models::BtAssemblyReferencesDisplayData1562>>,
    #[serde(rename = "bodyIdToEntityAppearanceSettings", skip_serializing_if = "Option::is_none")]
    pub body_id_to_entity_appearance_settings: Option<std::collections::HashMap<String, models::BtBaseEntityAppearanceSettings1391>>,
    #[serde(rename = "bodyIdToEntityAppearanceSettingsChanged", skip_serializing_if = "Option::is_none")]
    pub body_id_to_entity_appearance_settings_changed: Option<bool>,
    /// Type of JSON object.
    #[serde(rename = "btType", skip_serializing_if = "Option::is_none")]
    pub bt_type: Option<String>,
    #[serde(rename = "cacheablePartStudioDisplayDataVersion", skip_serializing_if = "Option::is_none")]
    pub cacheable_part_studio_display_data_version: Option<models::GbtPartStudioDisplayDataVersion>,
    #[serde(rename = "decalIdToDecal", skip_serializing_if = "Option::is_none")]
    pub decal_id_to_decal: Option<std::collections::HashMap<String, models::BtDecal2404>>,
    #[serde(rename = "deterministicIdToAssociatedFeatureIds", skip_serializing_if = "Option::is_none")]
    pub deterministic_id_to_associated_feature_ids: Option<std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "deterministicIdToEntity", skip_serializing_if = "Option::is_none")]
    pub deterministic_id_to_entity: Option<std::collections::HashMap<String, models::BtBaseEntityData33>>,
    #[serde(rename = "deterministicIdToPartDisplayData", skip_serializing_if = "Option::is_none")]
    pub deterministic_id_to_part_display_data: Option<std::collections::HashMap<String, models::BtPartDisplayData17>>,
    #[serde(rename = "deterministicPartIdToData", skip_serializing_if = "Option::is_none")]
    pub deterministic_part_id_to_data: Option<std::collections::HashMap<String, models::BtPartData16>>,
    #[serde(rename = "dimensions", skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<Vec<models::BtDimensionDisplayData323>>,
    #[serde(rename = "displayStateId", skip_serializing_if = "Option::is_none")]
    pub display_state_id: Option<String>,
    #[serde(rename = "elementId", skip_serializing_if = "Option::is_none")]
    pub element_id: Option<String>,
    #[serde(rename = "featureIdToOperationIndices", skip_serializing_if = "Option::is_none")]
    pub feature_id_to_operation_indices: Option<std::collections::HashMap<String, Vec<i32>>>,
    #[serde(rename = "fromCache", skip_serializing_if = "Option::is_none")]
    pub from_cache: Option<bool>,
    #[serde(rename = "fromFullElementId", skip_serializing_if = "Option::is_none")]
    pub from_full_element_id: Option<Box<models::BtFullElementId756>>,
    #[serde(rename = "fullElementId", skip_serializing_if = "Option::is_none")]
    pub full_element_id: Option<Box<models::BtFullElementId756>>,
    #[serde(rename = "incremental", skip_serializing_if = "Option::is_none")]
    pub incremental: Option<bool>,
    #[serde(rename = "instanceCount", skip_serializing_if = "Option::is_none")]
    pub instance_count: Option<i32>,
    #[serde(rename = "isBase", skip_serializing_if = "Option::is_none")]
    pub is_base: Option<bool>,
    #[serde(rename = "isExternal", skip_serializing_if = "Option::is_none")]
    pub is_external: Option<bool>,
    #[serde(rename = "isNoop", skip_serializing_if = "Option::is_none")]
    pub is_noop: Option<bool>,
    #[serde(rename = "keepFromMicroversion", skip_serializing_if = "Option::is_none")]
    pub keep_from_microversion: Option<bool>,
    #[serde(rename = "microversionId", skip_serializing_if = "Option::is_none")]
    pub microversion_id: Option<Box<models::BtMicroversionId366>>,
    #[serde(rename = "microversionIdAndConfigurationInterval", skip_serializing_if = "Option::is_none")]
    pub microversion_id_and_configuration_interval: Option<Box<models::BtMicroversionIdAndConfigurationInterval2364>>,
    #[serde(rename = "microversionInterval", skip_serializing_if = "Option::is_none")]
    pub microversion_interval: Option<Box<models::BtMicroversionIdInterval367>>,
    #[serde(rename = "numberOfSketchEntities", skip_serializing_if = "Option::is_none")]
    pub number_of_sketch_entities: Option<i32>,
    #[serde(rename = "partColorCycle", skip_serializing_if = "Option::is_none")]
    pub part_color_cycle: Option<Box<models::BtBasePartColorCycle2614>>,
    #[serde(rename = "partDisplayData", skip_serializing_if = "Option::is_none")]
    pub part_display_data: Option<Vec<models::BtPartDisplayData17>>,
    #[serde(rename = "partIdAndTessellationSettingToBuffers", skip_serializing_if = "Option::is_none")]
    pub part_id_and_tessellation_setting_to_buffers: Option<std::collections::HashMap<String, std::collections::HashMap<String, models::BtInsertableDisplayData2405>>>,
    #[serde(rename = "sketchFeatureIdAndTessellationSettingToBuffers", skip_serializing_if = "Option::is_none")]
    pub sketch_feature_id_and_tessellation_setting_to_buffers: Option<std::collections::HashMap<String, std::collections::HashMap<String, models::BtInsertableDisplayData2405>>>,
    #[serde(rename = "sketchImages", skip_serializing_if = "Option::is_none")]
    pub sketch_images: Option<std::collections::HashMap<String, std::collections::HashMap<String, models::BtSketchImageDisplayData1379>>>,
    #[serde(rename = "updatedParts", skip_serializing_if = "Option::is_none")]
    pub updated_parts: Option<Vec<String>>,
    #[serde(rename = "usage", skip_serializing_if = "Option::is_none")]
    pub usage: Option<models::GbtDisplayDataUsage>,
    #[serde(rename = "usesMultipleTessellationSettings", skip_serializing_if = "Option::is_none")]
    pub uses_multiple_tessellation_settings: Option<bool>,
    #[serde(rename = "versionForRasterization", skip_serializing_if = "Option::is_none")]
    pub version_for_rasterization: Option<Box<models::BtElementDisplayData326>>,
}

impl BtPartStudioDisplayData346 {
    pub fn new() -> BtPartStudioDisplayData346 {
        BtPartStudioDisplayData346 {
            all_insertable_display_data: None,
            annotations_for_element: None,
            appearance_id_to_appearance_override: None,
            assembly_reference_display_data: None,
            body_id_to_entity_appearance_settings: None,
            body_id_to_entity_appearance_settings_changed: None,
            bt_type: None,
            cacheable_part_studio_display_data_version: None,
            decal_id_to_decal: None,
            deterministic_id_to_associated_feature_ids: None,
            deterministic_id_to_entity: None,
            deterministic_id_to_part_display_data: None,
            deterministic_part_id_to_data: None,
            dimensions: None,
            display_state_id: None,
            element_id: None,
            feature_id_to_operation_indices: None,
            from_cache: None,
            from_full_element_id: None,
            full_element_id: None,
            incremental: None,
            instance_count: None,
            is_base: None,
            is_external: None,
            is_noop: None,
            keep_from_microversion: None,
            microversion_id: None,
            microversion_id_and_configuration_interval: None,
            microversion_interval: None,
            number_of_sketch_entities: None,
            part_color_cycle: None,
            part_display_data: None,
            part_id_and_tessellation_setting_to_buffers: None,
            sketch_feature_id_and_tessellation_setting_to_buffers: None,
            sketch_images: None,
            updated_parts: None,
            usage: None,
            uses_multiple_tessellation_settings: None,
            version_for_rasterization: None,
        }
    }
}


/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "btType")]
pub enum BtmFeature134 {
    #[serde(rename="BTMAssemblyFeature-887")]
    BtmAssemblyFeature887 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
    },
    #[serde(rename="BTMFeatureInvalid-1031")]
    BtmFeatureInvalid1031 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
    },
    #[serde(rename="BTMSketch-151")]
    BtmSketch151 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
    },
    #[serde(rename="BTMVariableStudioReference-2764")]
    BtmVariableStudioReference2764 {
        /// Unique ID of the feature instance within this Part Studio.
        #[serde(rename = "featureId", skip_serializing_if = "Option::is_none")]
        feature_id: Option<String>,
        /// The name of the feature spec that this feature instantiates.
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        /// Element microversion that is being imported.
        #[serde(rename = "importMicroversion", skip_serializing_if = "Option::is_none")]
        import_microversion: Option<String>,
        #[serde(rename = "mateConnectorFeature", skip_serializing_if = "Option::is_none")]
        mate_connector_feature: Option<bool>,
        /// User-visible name of the feature.
        #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
        name: Option<String>,
        /// Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `\"\"`. Custom features identify the Feature Studio that contains the definition.
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        /// ID for the feature node.
        #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
        node_id: Option<String>,
        /// A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtmParameter1>>,
        /// For internal use only. Should always be `false`.
        #[serde(rename = "returnAfterSubfeatures", skip_serializing_if = "Option::is_none")]
        return_after_subfeatures: Option<bool>,
        /// List of subfeatures belonging to the feature.
        #[serde(rename = "subFeatures", skip_serializing_if = "Option::is_none")]
        sub_features: Option<Vec<models::BtmFeature134>>,
        /// If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
        #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
        suppressed: Option<bool>,
        /// `true` if the suppression is configured in the Part Studio.
        #[serde(rename = "suppressionConfigured", skip_serializing_if = "Option::is_none")]
        suppression_configured: Option<bool>,
        /// If `true`, the feature references a Variable Studio.
        #[serde(rename = "variableStudioReference", skip_serializing_if = "Option::is_none")]
        variable_studio_reference: Option<bool>,
    },
}

impl Default for BtmFeature134 {
    fn default() -> Self {
        Self::BtmAssemblyFeature887 {
            feature_id: Default::default(),
            feature_type: Default::default(),
            import_microversion: Default::default(),
            mate_connector_feature: Default::default(),
            name: Default::default(),
            namespace: Default::default(),
            node_id: Default::default(),
            parameters: Default::default(),
            return_after_subfeatures: Default::default(),
            sub_features: Default::default(),
            suppressed: Default::default(),
            suppression_configured: Default::default(),
            variable_studio_reference: Default::default(),
        }
        
    }
}



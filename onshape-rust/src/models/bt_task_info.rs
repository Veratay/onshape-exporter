/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtTaskInfo {
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(rename = "approverRole", skip_serializing_if = "Option::is_none")]
    pub approver_role: Option<String>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<Vec<models::BtCommentInfo>>,
    #[serde(rename = "companyId", skip_serializing_if = "Option::is_none")]
    pub company_id: Option<String>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "creator", skip_serializing_if = "Option::is_none")]
    pub creator: Option<Box<models::BtUserSummaryInfo>>,
    #[serde(rename = "deletable", skip_serializing_if = "Option::is_none")]
    pub deletable: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "documentId", skip_serializing_if = "Option::is_none")]
    pub document_id: Option<String>,
    #[serde(rename = "documentName", skip_serializing_if = "Option::is_none")]
    pub document_name: Option<String>,
    #[serde(rename = "documentType", skip_serializing_if = "Option::is_none")]
    pub document_type: Option<i32>,
    #[serde(rename = "editable", skip_serializing_if = "Option::is_none")]
    pub editable: Option<bool>,
    #[serde(rename = "elementId", skip_serializing_if = "Option::is_none")]
    pub element_id: Option<String>,
    /// URI to fetch complete information of the resource.
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    /// Id of the resource.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the resource.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "objectId", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<models::BtMetadataPropertyInfo>>,
    #[serde(rename = "resolvedAt", skip_serializing_if = "Option::is_none")]
    pub resolved_at: Option<String>,
    #[serde(rename = "resolvedBy", skip_serializing_if = "Option::is_none")]
    pub resolved_by: Option<Box<models::BtUserSummaryInfo>>,
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<models::BtTaskRbacRoleInfo>>,
    #[serde(rename = "simpleName", skip_serializing_if = "Option::is_none")]
    pub simple_name: Option<String>,
    #[serde(rename = "sourceWorkspaceOrVersionName", skip_serializing_if = "Option::is_none")]
    pub source_workspace_or_version_name: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<i32>,
    #[serde(rename = "taskItems", skip_serializing_if = "Option::is_none")]
    pub task_items: Option<Vec<models::BtTaskItemInfo>>,
    #[serde(rename = "taskType", skip_serializing_if = "Option::is_none")]
    pub task_type: Option<String>,
    #[serde(rename = "teams", skip_serializing_if = "Option::is_none")]
    pub teams: Option<Vec<models::BtTaskTeamSummaryInfo>>,
    #[serde(rename = "thumbnail", skip_serializing_if = "Option::is_none")]
    pub thumbnail: Option<Box<models::BtThumbnailInfo>>,
    #[serde(rename = "transition", skip_serializing_if = "Option::is_none")]
    pub transition: Option<String>,
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<models::BtTaskUserSummaryInfo>>,
    #[serde(rename = "versionId", skip_serializing_if = "Option::is_none")]
    pub version_id: Option<String>,
    /// URI to visualize the resource in a webclient if applicable.
    #[serde(rename = "viewRef", skip_serializing_if = "Option::is_none")]
    pub view_ref: Option<String>,
    #[serde(rename = "workflowInfo", skip_serializing_if = "Option::is_none")]
    pub workflow_info: Option<Box<models::BtWorkflowableObjectInfo>>,
    #[serde(rename = "workflowableObjectType", skip_serializing_if = "Option::is_none")]
    pub workflowable_object_type: Option<i32>,
    #[serde(rename = "workspaceId", skip_serializing_if = "Option::is_none")]
    pub workspace_id: Option<String>,
}

impl BtTaskInfo {
    pub fn new() -> BtTaskInfo {
        BtTaskInfo {
            action: None,
            approver_role: None,
            comments: None,
            company_id: None,
            created_at: None,
            creator: None,
            deletable: None,
            description: None,
            document_id: None,
            document_name: None,
            document_type: None,
            editable: None,
            element_id: None,
            href: None,
            id: None,
            name: None,
            object_id: None,
            properties: None,
            resolved_at: None,
            resolved_by: None,
            roles: None,
            simple_name: None,
            source_workspace_or_version_name: None,
            state: None,
            status: None,
            task_items: None,
            task_type: None,
            teams: None,
            thumbnail: None,
            transition: None,
            users: None,
            version_id: None,
            view_ref: None,
            workflow_info: None,
            workflowable_object_type: None,
            workspace_id: None,
        }
    }
}


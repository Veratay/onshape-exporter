/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "btType")]
pub enum BtFeatureSpec129 {
    #[serde(rename="BTComputedPartPropertySpec-1746")]
    BtComputedPartPropertySpec1746 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "allParameters", skip_serializing_if = "Option::is_none")]
        all_parameters: Option<Vec<models::BtParameterSpec6>>,
        #[serde(rename = "computedPartPropertySpec", skip_serializing_if = "Option::is_none")]
        computed_part_property_spec: Option<bool>,
        #[serde(rename = "descriptionImageUri", skip_serializing_if = "Option::is_none")]
        description_image_uri: Option<String>,
        #[serde(rename = "editingLogic", skip_serializing_if = "Option::is_none")]
        editing_logic: Option<Box<models::BtEditingLogic2350>>,
        #[serde(rename = "featureNameTemplate", skip_serializing_if = "Option::is_none")]
        feature_name_template: Option<String>,
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        #[serde(rename = "featureTypeDescription", skip_serializing_if = "Option::is_none")]
        feature_type_description: Option<String>,
        #[serde(rename = "featureTypeName", skip_serializing_if = "Option::is_none")]
        feature_type_name: Option<String>,
        #[serde(rename = "filterSelectors", skip_serializing_if = "Option::is_none")]
        filter_selectors: Option<Vec<String>>,
        #[serde(rename = "fullFeatureType", skip_serializing_if = "Option::is_none")]
        full_feature_type: Option<String>,
        #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
        groups: Option<Vec<models::BtParameterGroupSpec3469>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "languageVersion", skip_serializing_if = "Option::is_none")]
        language_version: Option<i32>,
        #[serde(rename = "linkedLocationName", skip_serializing_if = "Option::is_none")]
        linked_location_name: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "locationInfos", skip_serializing_if = "Option::is_none")]
        location_infos: Option<Vec<models::BtLocationInfo226>>,
        #[serde(rename = "manipulatorChangeFunction", skip_serializing_if = "Option::is_none")]
        manipulator_change_function: Option<String>,
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        #[serde(rename = "namespaceIncludingEnums", skip_serializing_if = "Option::is_none")]
        namespace_including_enums: Option<String>,
        #[serde(rename = "namespaceTheSource", skip_serializing_if = "Option::is_none")]
        namespace_the_source: Option<bool>,
        #[serde(rename = "parameterIdToSpec", skip_serializing_if = "Option::is_none")]
        parameter_id_to_spec: Option<std::collections::HashMap<String, models::BtParameterSpec6>>,
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtParameterSpec6>>,
        #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
        signature: Option<String>,
        #[serde(rename = "sourceLocation", skip_serializing_if = "Option::is_none")]
        source_location: Option<Box<models::BtLocationInfo226>>,
        #[serde(rename = "sourceMicroversionId", skip_serializing_if = "Option::is_none")]
        source_microversion_id: Option<String>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "tableSpec", skip_serializing_if = "Option::is_none")]
        table_spec: Option<bool>,
        #[serde(rename = "toleranceSpec", skip_serializing_if = "Option::is_none")]
        tolerance_spec: Option<bool>,
        #[serde(rename = "tooltipTemplate", skip_serializing_if = "Option::is_none")]
        tooltip_template: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "variableStudioReferenceSpec", skip_serializing_if = "Option::is_none")]
        variable_studio_reference_spec: Option<bool>,
    },
    #[serde(rename="BTTableSpec-915")]
    BtTableSpec915 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "allParameters", skip_serializing_if = "Option::is_none")]
        all_parameters: Option<Vec<models::BtParameterSpec6>>,
        #[serde(rename = "computedPartPropertySpec", skip_serializing_if = "Option::is_none")]
        computed_part_property_spec: Option<bool>,
        #[serde(rename = "descriptionImageUri", skip_serializing_if = "Option::is_none")]
        description_image_uri: Option<String>,
        #[serde(rename = "editingLogic", skip_serializing_if = "Option::is_none")]
        editing_logic: Option<Box<models::BtEditingLogic2350>>,
        #[serde(rename = "featureNameTemplate", skip_serializing_if = "Option::is_none")]
        feature_name_template: Option<String>,
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        #[serde(rename = "featureTypeDescription", skip_serializing_if = "Option::is_none")]
        feature_type_description: Option<String>,
        #[serde(rename = "featureTypeName", skip_serializing_if = "Option::is_none")]
        feature_type_name: Option<String>,
        #[serde(rename = "filterSelectors", skip_serializing_if = "Option::is_none")]
        filter_selectors: Option<Vec<String>>,
        #[serde(rename = "fullFeatureType", skip_serializing_if = "Option::is_none")]
        full_feature_type: Option<String>,
        #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
        groups: Option<Vec<models::BtParameterGroupSpec3469>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "languageVersion", skip_serializing_if = "Option::is_none")]
        language_version: Option<i32>,
        #[serde(rename = "linkedLocationName", skip_serializing_if = "Option::is_none")]
        linked_location_name: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "locationInfos", skip_serializing_if = "Option::is_none")]
        location_infos: Option<Vec<models::BtLocationInfo226>>,
        #[serde(rename = "manipulatorChangeFunction", skip_serializing_if = "Option::is_none")]
        manipulator_change_function: Option<String>,
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        #[serde(rename = "namespaceIncludingEnums", skip_serializing_if = "Option::is_none")]
        namespace_including_enums: Option<String>,
        #[serde(rename = "namespaceTheSource", skip_serializing_if = "Option::is_none")]
        namespace_the_source: Option<bool>,
        #[serde(rename = "parameterIdToSpec", skip_serializing_if = "Option::is_none")]
        parameter_id_to_spec: Option<std::collections::HashMap<String, models::BtParameterSpec6>>,
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtParameterSpec6>>,
        #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
        signature: Option<String>,
        #[serde(rename = "sourceLocation", skip_serializing_if = "Option::is_none")]
        source_location: Option<Box<models::BtLocationInfo226>>,
        #[serde(rename = "sourceMicroversionId", skip_serializing_if = "Option::is_none")]
        source_microversion_id: Option<String>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "tableSpec", skip_serializing_if = "Option::is_none")]
        table_spec: Option<bool>,
        #[serde(rename = "toleranceSpec", skip_serializing_if = "Option::is_none")]
        tolerance_spec: Option<bool>,
        #[serde(rename = "tooltipTemplate", skip_serializing_if = "Option::is_none")]
        tooltip_template: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "variableStudioReferenceSpec", skip_serializing_if = "Option::is_none")]
        variable_studio_reference_spec: Option<bool>,
    },
    #[serde(rename="BTToleranceSpec-3441")]
    BtToleranceSpec3441 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "allParameters", skip_serializing_if = "Option::is_none")]
        all_parameters: Option<Vec<models::BtParameterSpec6>>,
        #[serde(rename = "computedPartPropertySpec", skip_serializing_if = "Option::is_none")]
        computed_part_property_spec: Option<bool>,
        #[serde(rename = "descriptionImageUri", skip_serializing_if = "Option::is_none")]
        description_image_uri: Option<String>,
        #[serde(rename = "editingLogic", skip_serializing_if = "Option::is_none")]
        editing_logic: Option<Box<models::BtEditingLogic2350>>,
        #[serde(rename = "featureNameTemplate", skip_serializing_if = "Option::is_none")]
        feature_name_template: Option<String>,
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        #[serde(rename = "featureTypeDescription", skip_serializing_if = "Option::is_none")]
        feature_type_description: Option<String>,
        #[serde(rename = "featureTypeName", skip_serializing_if = "Option::is_none")]
        feature_type_name: Option<String>,
        #[serde(rename = "filterSelectors", skip_serializing_if = "Option::is_none")]
        filter_selectors: Option<Vec<String>>,
        #[serde(rename = "fullFeatureType", skip_serializing_if = "Option::is_none")]
        full_feature_type: Option<String>,
        #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
        groups: Option<Vec<models::BtParameterGroupSpec3469>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "languageVersion", skip_serializing_if = "Option::is_none")]
        language_version: Option<i32>,
        #[serde(rename = "linkedLocationName", skip_serializing_if = "Option::is_none")]
        linked_location_name: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "locationInfos", skip_serializing_if = "Option::is_none")]
        location_infos: Option<Vec<models::BtLocationInfo226>>,
        #[serde(rename = "manipulatorChangeFunction", skip_serializing_if = "Option::is_none")]
        manipulator_change_function: Option<String>,
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        #[serde(rename = "namespaceIncludingEnums", skip_serializing_if = "Option::is_none")]
        namespace_including_enums: Option<String>,
        #[serde(rename = "namespaceTheSource", skip_serializing_if = "Option::is_none")]
        namespace_the_source: Option<bool>,
        #[serde(rename = "parameterIdToSpec", skip_serializing_if = "Option::is_none")]
        parameter_id_to_spec: Option<std::collections::HashMap<String, models::BtParameterSpec6>>,
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtParameterSpec6>>,
        #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
        signature: Option<String>,
        #[serde(rename = "sourceLocation", skip_serializing_if = "Option::is_none")]
        source_location: Option<Box<models::BtLocationInfo226>>,
        #[serde(rename = "sourceMicroversionId", skip_serializing_if = "Option::is_none")]
        source_microversion_id: Option<String>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "tableSpec", skip_serializing_if = "Option::is_none")]
        table_spec: Option<bool>,
        #[serde(rename = "toleranceSpec", skip_serializing_if = "Option::is_none")]
        tolerance_spec: Option<bool>,
        #[serde(rename = "tooltipTemplate", skip_serializing_if = "Option::is_none")]
        tooltip_template: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "variableStudioReferenceSpec", skip_serializing_if = "Option::is_none")]
        variable_studio_reference_spec: Option<bool>,
    },
    #[serde(rename="BTVariableStudioReferenceSpec-5278")]
    BtVariableStudioReferenceSpec5278 {
        #[serde(rename = "additionalLocalizedStrings", skip_serializing_if = "Option::is_none")]
        additional_localized_strings: Option<i32>,
        #[serde(rename = "allParameters", skip_serializing_if = "Option::is_none")]
        all_parameters: Option<Vec<models::BtParameterSpec6>>,
        #[serde(rename = "computedPartPropertySpec", skip_serializing_if = "Option::is_none")]
        computed_part_property_spec: Option<bool>,
        #[serde(rename = "descriptionImageUri", skip_serializing_if = "Option::is_none")]
        description_image_uri: Option<String>,
        #[serde(rename = "editingLogic", skip_serializing_if = "Option::is_none")]
        editing_logic: Option<Box<models::BtEditingLogic2350>>,
        #[serde(rename = "featureNameTemplate", skip_serializing_if = "Option::is_none")]
        feature_name_template: Option<String>,
        #[serde(rename = "featureType", skip_serializing_if = "Option::is_none")]
        feature_type: Option<String>,
        #[serde(rename = "featureTypeDescription", skip_serializing_if = "Option::is_none")]
        feature_type_description: Option<String>,
        #[serde(rename = "featureTypeName", skip_serializing_if = "Option::is_none")]
        feature_type_name: Option<String>,
        #[serde(rename = "filterSelectors", skip_serializing_if = "Option::is_none")]
        filter_selectors: Option<Vec<String>>,
        #[serde(rename = "fullFeatureType", skip_serializing_if = "Option::is_none")]
        full_feature_type: Option<String>,
        #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
        groups: Option<Vec<models::BtParameterGroupSpec3469>>,
        #[serde(rename = "iconUri", skip_serializing_if = "Option::is_none")]
        icon_uri: Option<String>,
        #[serde(rename = "languageVersion", skip_serializing_if = "Option::is_none")]
        language_version: Option<i32>,
        #[serde(rename = "linkedLocationName", skip_serializing_if = "Option::is_none")]
        linked_location_name: Option<String>,
        #[serde(rename = "localizableName", skip_serializing_if = "Option::is_none")]
        localizable_name: Option<String>,
        #[serde(rename = "localizedName", skip_serializing_if = "Option::is_none")]
        localized_name: Option<String>,
        #[serde(rename = "locationInfos", skip_serializing_if = "Option::is_none")]
        location_infos: Option<Vec<models::BtLocationInfo226>>,
        #[serde(rename = "manipulatorChangeFunction", skip_serializing_if = "Option::is_none")]
        manipulator_change_function: Option<String>,
        #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
        namespace: Option<String>,
        #[serde(rename = "namespaceIncludingEnums", skip_serializing_if = "Option::is_none")]
        namespace_including_enums: Option<String>,
        #[serde(rename = "namespaceTheSource", skip_serializing_if = "Option::is_none")]
        namespace_the_source: Option<bool>,
        #[serde(rename = "parameterIdToSpec", skip_serializing_if = "Option::is_none")]
        parameter_id_to_spec: Option<std::collections::HashMap<String, models::BtParameterSpec6>>,
        #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
        parameters: Option<Vec<models::BtParameterSpec6>>,
        #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
        signature: Option<String>,
        #[serde(rename = "sourceLocation", skip_serializing_if = "Option::is_none")]
        source_location: Option<Box<models::BtLocationInfo226>>,
        #[serde(rename = "sourceMicroversionId", skip_serializing_if = "Option::is_none")]
        source_microversion_id: Option<String>,
        #[serde(rename = "stringsToLocalize", skip_serializing_if = "Option::is_none")]
        strings_to_localize: Option<Vec<String>>,
        #[serde(rename = "tableSpec", skip_serializing_if = "Option::is_none")]
        table_spec: Option<bool>,
        #[serde(rename = "toleranceSpec", skip_serializing_if = "Option::is_none")]
        tolerance_spec: Option<bool>,
        #[serde(rename = "tooltipTemplate", skip_serializing_if = "Option::is_none")]
        tooltip_template: Option<String>,
        #[serde(rename = "uiHints", skip_serializing_if = "Option::is_none")]
        ui_hints: Option<Vec<models::GbtuiHint>>,
        #[serde(rename = "variableStudioReferenceSpec", skip_serializing_if = "Option::is_none")]
        variable_studio_reference_spec: Option<bool>,
    },
}

impl Default for BtFeatureSpec129 {
    fn default() -> Self {
        Self::BtComputedPartPropertySpec1746 {
            additional_localized_strings: Default::default(),
            all_parameters: Default::default(),
            computed_part_property_spec: Default::default(),
            description_image_uri: Default::default(),
            editing_logic: Default::default(),
            feature_name_template: Default::default(),
            feature_type: Default::default(),
            feature_type_description: Default::default(),
            feature_type_name: Default::default(),
            filter_selectors: Default::default(),
            full_feature_type: Default::default(),
            groups: Default::default(),
            icon_uri: Default::default(),
            language_version: Default::default(),
            linked_location_name: Default::default(),
            localizable_name: Default::default(),
            localized_name: Default::default(),
            location_infos: Default::default(),
            manipulator_change_function: Default::default(),
            namespace: Default::default(),
            namespace_including_enums: Default::default(),
            namespace_the_source: Default::default(),
            parameter_id_to_spec: Default::default(),
            parameters: Default::default(),
            signature: Default::default(),
            source_location: Default::default(),
            source_microversion_id: Default::default(),
            strings_to_localize: Default::default(),
            table_spec: Default::default(),
            tolerance_spec: Default::default(),
            tooltip_template: Default::default(),
            ui_hints: Default::default(),
            variable_studio_reference_spec: Default::default(),
        }
        
    }
}



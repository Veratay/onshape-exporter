/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GbtConstraintType {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "COINCIDENT")]
    Coincident,
    #[serde(rename = "PARALLEL")]
    Parallel,
    #[serde(rename = "VERTICAL")]
    Vertical,
    #[serde(rename = "HORIZONTAL")]
    Horizontal,
    #[serde(rename = "PERPENDICULAR")]
    Perpendicular,
    #[serde(rename = "CONCENTRIC")]
    Concentric,
    #[serde(rename = "MIRROR")]
    Mirror,
    #[serde(rename = "MIDPOINT")]
    Midpoint,
    #[serde(rename = "TANGENT")]
    Tangent,
    #[serde(rename = "EQUAL")]
    Equal,
    #[serde(rename = "LENGTH")]
    Length,
    #[serde(rename = "DISTANCE")]
    Distance,
    #[serde(rename = "ANGLE")]
    Angle,
    #[serde(rename = "RADIUS")]
    Radius,
    #[serde(rename = "NORMAL")]
    Normal,
    #[serde(rename = "FIX")]
    Fix,
    #[serde(rename = "PROJECTED")]
    Projected,
    #[serde(rename = "OFFSET")]
    Offset,
    #[serde(rename = "CIRCULAR_PATTERN")]
    CircularPattern,
    #[serde(rename = "PIERCE")]
    Pierce,
    #[serde(rename = "LINEAR_PATTERN")]
    LinearPattern,
    #[serde(rename = "MAJOR_DIAMETER")]
    MajorDiameter,
    #[serde(rename = "MINOR_DIAMETER")]
    MinorDiameter,
    #[serde(rename = "QUADRANT")]
    Quadrant,
    #[serde(rename = "DIAMETER")]
    Diameter,
    #[serde(rename = "SILHOUETTED")]
    Silhouetted,
    #[serde(rename = "CENTERLINE_DIMENSION")]
    CenterlineDimension,
    #[serde(rename = "INTERSECTED")]
    Intersected,
    #[serde(rename = "RHO")]
    Rho,
    #[serde(rename = "EQUAL_CURVATURE")]
    EqualCurvature,
    #[serde(rename = "BEZIER_DEGREE")]
    BezierDegree,
    #[serde(rename = "FREEZE")]
    Freeze,
    #[serde(rename = "UNKNOWN")]
    Unknown,

}

impl std::fmt::Display for GbtConstraintType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::None => write!(f, "NONE"),
            Self::Coincident => write!(f, "COINCIDENT"),
            Self::Parallel => write!(f, "PARALLEL"),
            Self::Vertical => write!(f, "VERTICAL"),
            Self::Horizontal => write!(f, "HORIZONTAL"),
            Self::Perpendicular => write!(f, "PERPENDICULAR"),
            Self::Concentric => write!(f, "CONCENTRIC"),
            Self::Mirror => write!(f, "MIRROR"),
            Self::Midpoint => write!(f, "MIDPOINT"),
            Self::Tangent => write!(f, "TANGENT"),
            Self::Equal => write!(f, "EQUAL"),
            Self::Length => write!(f, "LENGTH"),
            Self::Distance => write!(f, "DISTANCE"),
            Self::Angle => write!(f, "ANGLE"),
            Self::Radius => write!(f, "RADIUS"),
            Self::Normal => write!(f, "NORMAL"),
            Self::Fix => write!(f, "FIX"),
            Self::Projected => write!(f, "PROJECTED"),
            Self::Offset => write!(f, "OFFSET"),
            Self::CircularPattern => write!(f, "CIRCULAR_PATTERN"),
            Self::Pierce => write!(f, "PIERCE"),
            Self::LinearPattern => write!(f, "LINEAR_PATTERN"),
            Self::MajorDiameter => write!(f, "MAJOR_DIAMETER"),
            Self::MinorDiameter => write!(f, "MINOR_DIAMETER"),
            Self::Quadrant => write!(f, "QUADRANT"),
            Self::Diameter => write!(f, "DIAMETER"),
            Self::Silhouetted => write!(f, "SILHOUETTED"),
            Self::CenterlineDimension => write!(f, "CENTERLINE_DIMENSION"),
            Self::Intersected => write!(f, "INTERSECTED"),
            Self::Rho => write!(f, "RHO"),
            Self::EqualCurvature => write!(f, "EQUAL_CURVATURE"),
            Self::BezierDegree => write!(f, "BEZIER_DEGREE"),
            Self::Freeze => write!(f, "FREEZE"),
            Self::Unknown => write!(f, "UNKNOWN"),
        }
    }
}

impl Default for GbtConstraintType {
    fn default() -> GbtConstraintType {
        Self::None
    }
}


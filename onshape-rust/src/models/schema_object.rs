/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SchemaObject {
    #[serde(rename = "additionalItems", skip_serializing_if = "Option::is_none")]
    pub additional_items: Option<Box<models::Schema>>,
    #[serde(rename = "additionalProperties", skip_serializing_if = "Option::is_none")]
    pub additional_properties: Option<serde_json::Value>,
    #[serde(rename = "allOf", skip_serializing_if = "Option::is_none")]
    pub all_of: Option<Vec<models::Schema>>,
    #[serde(rename = "anyOf", skip_serializing_if = "Option::is_none")]
    pub any_of: Option<Vec<models::Schema>>,
    #[serde(rename = "booleanSchemaValue", skip_serializing_if = "Option::is_none")]
    pub boolean_schema_value: Option<bool>,
    #[serde(rename = "const", skip_serializing_if = "Option::is_none")]
    pub r#const: Option<serde_json::Value>,
    #[serde(rename = "contains", skip_serializing_if = "Option::is_none")]
    pub contains: Option<Box<models::Schema>>,
    #[serde(rename = "contentEncoding", skip_serializing_if = "Option::is_none")]
    pub content_encoding: Option<String>,
    #[serde(rename = "contentMediaType", skip_serializing_if = "Option::is_none")]
    pub content_media_type: Option<String>,
    #[serde(rename = "contentSchema", skip_serializing_if = "Option::is_none")]
    pub content_schema: Option<Box<models::Schema>>,
    #[serde(rename = "default", skip_serializing_if = "Option::is_none")]
    pub default: Option<serde_json::Value>,
    #[serde(rename = "dependentRequired", skip_serializing_if = "Option::is_none")]
    pub dependent_required: Option<std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "deprecated", skip_serializing_if = "Option::is_none")]
    pub deprecated: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "discriminator", skip_serializing_if = "Option::is_none")]
    pub discriminator: Option<Box<models::Discriminator>>,
    #[serde(rename = "else", skip_serializing_if = "Option::is_none")]
    pub r#else: Option<Box<models::Schema>>,
    #[serde(rename = "enum", skip_serializing_if = "Option::is_none")]
    pub r#enum: Option<Vec<serde_json::Value>>,
    #[serde(rename = "example", skip_serializing_if = "Option::is_none")]
    pub example: Option<serde_json::Value>,
    #[serde(rename = "exampleSetFlag", skip_serializing_if = "Option::is_none")]
    pub example_set_flag: Option<bool>,
    #[serde(rename = "examples", skip_serializing_if = "Option::is_none")]
    pub examples: Option<Vec<serde_json::Value>>,
    #[serde(rename = "exclusiveMaximum", skip_serializing_if = "Option::is_none")]
    pub exclusive_maximum: Option<bool>,
    #[serde(rename = "exclusiveMaximumValue", skip_serializing_if = "Option::is_none")]
    pub exclusive_maximum_value: Option<f64>,
    #[serde(rename = "exclusiveMinimum", skip_serializing_if = "Option::is_none")]
    pub exclusive_minimum: Option<bool>,
    #[serde(rename = "exclusiveMinimumValue", skip_serializing_if = "Option::is_none")]
    pub exclusive_minimum_value: Option<f64>,
    #[serde(rename = "extensions", skip_serializing_if = "Option::is_none")]
    pub extensions: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "externalDocs", skip_serializing_if = "Option::is_none")]
    pub external_docs: Option<Box<models::ExternalDocumentation>>,
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(rename = "get$anchor", skip_serializing_if = "Option::is_none")]
    pub get_dollar_anchor: Option<String>,
    #[serde(rename = "get$comment", skip_serializing_if = "Option::is_none")]
    pub get_dollar_comment: Option<String>,
    #[serde(rename = "get$id", skip_serializing_if = "Option::is_none")]
    pub get_dollar_id: Option<String>,
    #[serde(rename = "get$ref", skip_serializing_if = "Option::is_none")]
    pub get_dollar_ref: Option<String>,
    #[serde(rename = "get$schema", skip_serializing_if = "Option::is_none")]
    pub get_dollar_schema: Option<String>,
    #[serde(rename = "if", skip_serializing_if = "Option::is_none")]
    pub r#if: Option<Box<models::Schema>>,
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Box<models::SchemaObject>>,
    #[serde(rename = "jsonSchema", skip_serializing_if = "Option::is_none")]
    pub json_schema: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "jsonSchemaImpl", skip_serializing_if = "Option::is_none")]
    pub json_schema_impl: Option<serde_json::Value>,
    #[serde(rename = "maxContains", skip_serializing_if = "Option::is_none")]
    pub max_contains: Option<i32>,
    #[serde(rename = "maxItems", skip_serializing_if = "Option::is_none")]
    pub max_items: Option<i32>,
    #[serde(rename = "maxLength", skip_serializing_if = "Option::is_none")]
    pub max_length: Option<i32>,
    #[serde(rename = "maxProperties", skip_serializing_if = "Option::is_none")]
    pub max_properties: Option<i32>,
    #[serde(rename = "maximum", skip_serializing_if = "Option::is_none")]
    pub maximum: Option<f64>,
    #[serde(rename = "minContains", skip_serializing_if = "Option::is_none")]
    pub min_contains: Option<i32>,
    #[serde(rename = "minItems", skip_serializing_if = "Option::is_none")]
    pub min_items: Option<i32>,
    #[serde(rename = "minLength", skip_serializing_if = "Option::is_none")]
    pub min_length: Option<i32>,
    #[serde(rename = "minProperties", skip_serializing_if = "Option::is_none")]
    pub min_properties: Option<i32>,
    #[serde(rename = "minimum", skip_serializing_if = "Option::is_none")]
    pub minimum: Option<f64>,
    #[serde(rename = "multipleOf", skip_serializing_if = "Option::is_none")]
    pub multiple_of: Option<f64>,
    #[serde(rename = "not", skip_serializing_if = "Option::is_none")]
    pub not: Option<Box<models::Schema>>,
    #[serde(rename = "nullable", skip_serializing_if = "Option::is_none")]
    pub nullable: Option<bool>,
    #[serde(rename = "oneOf", skip_serializing_if = "Option::is_none")]
    pub one_of: Option<Vec<models::Schema>>,
    #[serde(rename = "pattern", skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    #[serde(rename = "prefixItems", skip_serializing_if = "Option::is_none")]
    pub prefix_items: Option<Vec<models::Schema>>,
    #[serde(rename = "propertyNames", skip_serializing_if = "Option::is_none")]
    pub property_names: Option<Box<models::Schema>>,
    #[serde(rename = "readOnly", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<Vec<String>>,
    #[serde(rename = "then", skip_serializing_if = "Option::is_none")]
    pub then: Option<Box<models::Schema>>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "types", skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
    #[serde(rename = "unevaluatedItems", skip_serializing_if = "Option::is_none")]
    pub unevaluated_items: Option<Box<models::Schema>>,
    #[serde(rename = "unevaluatedProperties", skip_serializing_if = "Option::is_none")]
    pub unevaluated_properties: Option<Box<models::Schema>>,
    #[serde(rename = "uniqueItems", skip_serializing_if = "Option::is_none")]
    pub unique_items: Option<bool>,
    #[serde(rename = "writeOnly", skip_serializing_if = "Option::is_none")]
    pub write_only: Option<bool>,
    #[serde(rename = "xml", skip_serializing_if = "Option::is_none")]
    pub xml: Option<Box<models::Xml>>,
}

impl SchemaObject {
    pub fn new() -> SchemaObject {
        SchemaObject {
            additional_items: None,
            additional_properties: None,
            all_of: None,
            any_of: None,
            boolean_schema_value: None,
            r#const: None,
            contains: None,
            content_encoding: None,
            content_media_type: None,
            content_schema: None,
            default: None,
            dependent_required: None,
            deprecated: None,
            description: None,
            discriminator: None,
            r#else: None,
            r#enum: None,
            example: None,
            example_set_flag: None,
            examples: None,
            exclusive_maximum: None,
            exclusive_maximum_value: None,
            exclusive_minimum: None,
            exclusive_minimum_value: None,
            extensions: None,
            external_docs: None,
            format: None,
            get_dollar_anchor: None,
            get_dollar_comment: None,
            get_dollar_id: None,
            get_dollar_ref: None,
            get_dollar_schema: None,
            r#if: None,
            items: None,
            json_schema: None,
            json_schema_impl: None,
            max_contains: None,
            max_items: None,
            max_length: None,
            max_properties: None,
            maximum: None,
            min_contains: None,
            min_items: None,
            min_length: None,
            min_properties: None,
            minimum: None,
            multiple_of: None,
            not: None,
            nullable: None,
            one_of: None,
            pattern: None,
            prefix_items: None,
            property_names: None,
            read_only: None,
            required: None,
            then: None,
            title: None,
            r#type: None,
            types: None,
            unevaluated_items: None,
            unevaluated_properties: None,
            unique_items: None,
            write_only: None,
            xml: None,
        }
    }
}


/*
 * Onshape REST API
 *
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn't used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://cad.onshape.com/appstore/dev-portal): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.198.56658-8969b956ea73
 * Contact: api-support@onshape.zendesk.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BtAppElementUpdateParams {
    /// Edits to be applied to the element's subelement data.
    #[serde(rename = "changes", skip_serializing_if = "Option::is_none")]
    pub changes: Option<Vec<models::BtAppElementChangeParams>>,
    /// The label that will appear in the document's edit history for this operation. If blank, a value will be auto-generated.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A json patch that will be applied to the application element's json data.
    #[serde(rename = "jsonPatch", skip_serializing_if = "Option::is_none")]
    pub json_patch: Option<String>,
    #[serde(rename = "jsonTreeEdit", skip_serializing_if = "Option::is_none")]
    pub json_tree_edit: Option<Box<models::BtjEdit3734>>,
    /// The id of the last change made to this application element. This can be retrieved from the response for any app element modification endpoint.
    #[serde(rename = "parentChangeId", skip_serializing_if = "Option::is_none")]
    pub parent_change_id: Option<String>,
    /// Edits to be applied to the element's metadata.
    #[serde(rename = "propertyUpdates", skip_serializing_if = "Option::is_none")]
    pub property_updates: Option<Vec<models::BtMetadataPropertyUpdateParams>>,
    /// If true, errors in request processing will be returned in a 200 response with a meaningful description. Otherwise, errors will result in a relevant HTTP error response.
    #[serde(rename = "returnError", skip_serializing_if = "Option::is_none")]
    pub return_error: Option<bool>,
    /// If specified, and jsonTreeEdit is non-empty, the json difference will be returned in this format, otherwise no json difference will be returned.
    #[serde(rename = "returnJsonDifferenceFormat", skip_serializing_if = "Option::is_none")]
    pub return_json_difference_format: Option<ReturnJsonDifferenceFormat>,
    /// The id of the transaction in which this operation should take place. Transaction ids can be generated through the AppElement startTransaction API.
    #[serde(rename = "transactionId", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<String>,
}

impl BtAppElementUpdateParams {
    pub fn new() -> BtAppElementUpdateParams {
        BtAppElementUpdateParams {
            changes: None,
            description: None,
            json_patch: None,
            json_tree_edit: None,
            parent_change_id: None,
            property_updates: None,
            return_error: None,
            return_json_difference_format: None,
            transaction_id: None,
        }
    }
}
/// If specified, and jsonTreeEdit is non-empty, the json difference will be returned in this format, otherwise no json difference will be returned.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReturnJsonDifferenceFormat {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "full_path")]
    FullPath,
    #[serde(rename = "json_patch")]
    JsonPatch,
}

impl Default for ReturnJsonDifferenceFormat {
    fn default() -> ReturnJsonDifferenceFormat {
        Self::Default
    }
}

